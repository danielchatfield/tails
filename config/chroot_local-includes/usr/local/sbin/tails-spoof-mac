#!/bin/sh

set -e

# This script spoofs or resets the MAC address of all NICs given as
# arguments according to the setting in Tails Greeter. The default (i.e
# before Tails Greeter has been run) is to enable MAC spoofing.

. /usr/local/lib/tails-shell-library/hardware.sh
. /usr/local/lib/tails-shell-library/log.sh
. /usr/local/lib/tails-shell-library/tails_greeter.sh

. /usr/bin/gettext.sh
TEXTDOMAIN="tails"
export TEXTDOMAIN

show_notification() {
    until pgrep gnome-panel >/dev/null; do
        sleep 1
    done
    /usr/local/sbin/tails-notify-user "${1}" "${2}" 0
}

notify_panic_success() {
    local nic
    local nic_name
    nic="${1}"
    nic_name="${2}"
    show_notification "`gettext \"MAC spoofing failure!\"`" "`eval_gettext \"MAC spoofing failed for network device '\\\${nic_name}' (\\\${nic}). The device has been disabled to prevent it from leaking your geographical location. For more information, see the <a href='file:///usr/share/doc/tails/website/doc/advanced_topics/mac_changer.en.html'>documentation</a>.\"`"
}

notify_panic_failure() {
    local nic
    local nic_name
    nic="${1}"
    nic_name="${2}"
    show_notification "`gettext \"MAC spoofing failure!\"`" "`eval_gettext \"MAC spoofing failed for network device '\\\${nic_name}' (\\\${nic}). Because of failures when trying to disable the device, networking has been completely disabled instead. For more information, see the <a href='file:///usr/share/doc/tails/website/doc/advanced_topics/mac_changer.en.html'>documentation</a>.\"`"
}

mac_spoof_panic() {
    local nic
    local module
    local nic_name
    local unload_success
    nic=${1}
    /sbin/ip link set dev "${nic}" down
    module=$(get_module_used_by_nic "${nic}")
    nic_name="$(get_name_of_nic ${nic})"
    echo "blacklist ${module}" >> /etc/modprobe.d/"${module}"-blacklist.conf
    unload_module_and_rev_deps "${module}"
    if [ "$?" -ne 0 ] || lsmod | grep -q "^${module}\s"; then
        service network-manager stop
        log "Failed to unload module ${module} of NIC ${nic}. Stopping NetworkManager."
        notify_panic_failure "${nic}" "${nic_name}" &
    else
        log "Successfully unloaded module ${module} of NIC ${nic}."
        notify_panic_success "${nic}" "${nic_name}" &
    fi
}

# Only use this helper when using macchanger options that may require
# the interface to be down, i.e. those that actually change the MAC
# address.
# Note that we (for simplicity) specify the interface as the first
# argument.
macchanger_helper() {
    local nic
    local opts
    local was_up
    local ret
    local msg
    nic=$1
    shift
    opts=$*
    was_up=no
    if nic_is_up ${nic}; then
        was_up=yes
        msg="$(/sbin/ip link set dev "${nic}" down 2>&1)"
        if [ "$?" -ne 0 ] ; then
            log "failed to down ${nic}: ${msg}"
            return 1
        fi
    fi
    msg=$(macchanger ${opts} ${nic} 2>&1 >/dev/null)
    ret=$?
    if [ "${ret}" -ne 0 ]; then
        log "macchanger returned error code ${ret} and reported: ${msg}"
    fi

    if [ "${was_up}" = yes ]; then
        msg="$(/sbin/ip link set dev "${nic}" up 2>&1)"
        if [ "$?" -ne 0 ]; then
            log "failed to up ${nic}: ${msg}"
            return 1
        fi
    fi
    return ${ret}
}

spoof_mac() {
    macchanger_helper -e "${1}"
}

set_log_tag spoof-mac

NIC="${1}"

if ! mac_spoof_is_enabled; then
    exit 0
fi

log "Trying to spoof MAC address of NIC ${NIC}..."

if ! nic_exists "${NIC}"; then
    log "NIC ${NIC} doesn't exist, skipping"
    exit 1
fi

if nic_has_spoofed_mac "${NIC}"; then
    log "NIC ${NIC}'s MAC address is already spoofed, skipping"
    exit 0
fi

# Ignore errors since the fail-safe below will catch them.
spoof_mac "${NIC}" || :

# MAC spoofing fail-safe: if $NIC's MAC address isn't spoofed at this
# point we have to take some drastic measures in order to prevent
# potential leaks.
if ! nic_has_spoofed_mac "${NIC}"; then
    log "Failed to spoof MAC address of NIC ${NIC}. Going into panic mode."
    if ! mac_spoof_panic "${NIC}"; then
        # If mac_spoof_panic() fails we're quite screwed, so we kill
        # NetworkManager without notification to do our best to
        # prevent a MAC address leak.
        service network-manager stop
        log "Panic mode failed for NIC ${NIC}. Killing NetworkManager."
    fi
    exit 1
fi

log "Successfully spoofed MAC address of NIC ${NIC}"
