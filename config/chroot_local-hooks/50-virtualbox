#!/bin/sh

set -e

echo "Building VirtualBox guest modules"

hw_arch="`dpkg --print-architecture`"
if [ "$hw_arch" != i386 -a "$hw_arch" != amd64 ]; then
   exit 0
fi

available_gcc_version=4.4
wanted_gcc_version=4.6

# the -dkms package must be installed *after* dkms to be properly registered
apt-get install --yes build-essential dkms dpatch

# Have the modules built for every installed kernel
for KERNEL in /boot/vmlinuz-* ; do
   KERNEL_VERSION="$(basename ${KERNEL} | sed -e 's|vmlinuz-||')"
   VERSION_SCHEME="[[:digit:]]\+\(\.[[:digit:]]\+\)*-[[:digit:]]\+"
   KERNEL_ARCH="$(echo ${KERNEL_VERSION} | sed -e "s|${VERSION_SCHEME}-||")"

   # dkms uses uname to find out what kernel to build modules for.
   # So, after installing dkms, but before installing
   # virtualbox-guest-dkms, we divert uname to a fake one that
   # emulates 'uname -r' by reporting the kernel version found in /boot rather
   # than the build system's one.

   mv /bin/uname /bin/uname.$$
   cat > /bin/uname <<EOF
#! /bin/sh
echo "$KERNEL_VERSION"
EOF
   chmod 755 /bin/uname

   # Install the headers for the kernel we are build modules for
   apt-get install --yes linux-headers-$(uname -r)

   # Have the modules automagically built by dkms for all kernels.
   # Also, at this time of the build, we've got a recent enough X.Org installed,
   # so we can install the X11 tools eventually.
   apt-get install --yes virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11

   # Revert to the real uname.
   mv /bin/uname.$$ /bin/uname
done

# clean the build directory
rm -r /var/lib/dkms/virtualbox-guest/

# virtualbox-guest-dkms's postrm script deletes any previously
# built binary module; let's delete it before purging the package.
rm /var/lib/dpkg/info/virtualbox-guest-dkms.prerm
