[[!comment format=mdwn
 ip="127.0.0.1"
 subject="comment 7"
 date="2012-12-13T05:19:28Z"
 content="""
>Anything more than /dev/urandom is probably unnecessary and even /dev/urandom may be overkill, as various much faster alternatives may be adequate. These include badblocks, shred with only one iteration, or even using DBAN with the \"PRNG Stream\" option set to only one round.

[A blog post by Debian developer Uwe Herman](http://www.hermann-uwe.de/blog/howto-disk-encryption-with-dm-crypt-luks-and-debian) is one of a number of sources that claim that running `badblocks -c 10240 -s -w -t random -v /dev/{drive or partition}` (which is much faster than `/dev/urandom`) is sufficient for preparing a drive to be encrypted.

However, [the ArchWiki warns](https://wiki.archlinux.org/index.php/Badblocks) : 

>Warning: This is not secure for cryptographic purposes. A \"random pattern\" is a contradiction in itself. As badblocks does not (like urandom) apply sophisticated procedures to reuse entropy but simply repeats one \"random pattern\" it should not be used where random data would be needed, e.g. for block device encryption.

And states [here](https://wiki.archlinux.org/index.php/Securely_wipe_disk#Preparations_for_block_device_encryption):

>Warning: If Block device encryption is mapped on a partition that contains anything else than random/encrypted data, disclosure of usage patterns on the encrypted drive is possible and weakens the encryption being comparable with filesystem-level-encryption. Do never use /dev/zero, simple patterns (badblocks, eg.) or other unrandom data before setting up Block device encryption if you are serious about it!

I noticed that the Tails documentation on creating LUKS volumes says nothing about randomizing first. (Nor is there any mention whatsoever that such a volume is only as secure as the *strength of the passphrase*.)

@comment 4: 

I had written, \"should take *no more* than \"mere\" days.\", so I meant that as an *outer limit* of sorts.

Using Tails, it just took me over three hours to wipe a 32 GB SD card over USB 2.0 with /dev/urandom.

A 320 GB external hard drive took close to 16 hours (with Lubuntu, also USB 2.0).

(2GB RAM, 1.4 GHZ CPU)

I used:
`cat /dev/urandom | pv -brtp -s <size of drive> | dd of=/dev/<drive> bs=4096` 

NOTE:
1.) I don't really understand the `bs=4096` except that it's certainly not essential. I believe it may speed-up the process but I fear there may be some drawback. I omitted it for the SD card. 

2.) `pv -brtp` simply uses `pipe viewer` to display the progress in real time. 

Adding `-s <size of drive>` adds a progress bar.

My source for this command was [this blog post](http://blog.christophersmart.com/2009/11/28/checking-the-progress-of-dd/)   
"""]]
