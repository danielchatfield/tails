[In summary: For a **manual** install, one should be able to check its integrity. See detailed info and step-by-step instructions in "comment 8"]

Is there a way to check the integrity of a TAILS ISO once it has been "burnt" to a **USB stick**? (not with persistence, just the regular TAILS live that would be the equivalent of a burnt DVD)

That is, to determine whether or not the installation of TAILS had been tampered with -- whether via physical access *or* via remote access. (Or even just to be sure that the write-to-USB actually completed properly, the way one can verify the integrity of a burnt *CD*.)

I tried 

	gpg --verify tails-i386-0.12.1.iso.pgp /dev/{my usb stick}

(as instructed at 
https://tails.boum.org/forum/checking_integrity_of_burned_CD/ )

and I got the following error,

    verify signatures failed: file open error

(As per what I point-out below, I tried both /dev/sdc as well as /dev/sdc4 and got this same error for both)
 
Also, the USB flash stick that I installed TAILS onto is only 2 GB, yet...

When I look at this drive in `Disk Utility`, it shows "2.0 GB free" at **/dev/sdc** in addition to TAILS occupying 799 MB at **/dev/sdc4** !

How can this possibly be when, as I said, the capacity of the *entire* USB stick is only **2 GB**?!  

As for `sha256sum`, I was able to run *that* command on both /dev/sdc4 as well /dev/sdc and got the following:

72c59e0382342aad6f5fbc2c96e301d2458644549f1b8bf88c90cbd5229fb5d2  /dev/sdc4

d9937140119da81a8ab876aaff8715ced3bc12928c6c4816a6479bbb7071989a  /dev/sdc

Unfortunately, I wouldn't know where to find the correct sha256 checksum to check mine against, as the page at 
https://tails.boum.org/download/index.en.html
reports that it was last updated on May 12th-- long before the current version of TAILS had been released.

(The lack of update of the verification instructions also appears to have been the cause of this:
)

(Also note that in order to run the sha256sum commands I had to acquire root privileges. After discovering this, I tried repeating the gpg --verify command as root but got the identical "file open error" that I reported at the top of this post.)
