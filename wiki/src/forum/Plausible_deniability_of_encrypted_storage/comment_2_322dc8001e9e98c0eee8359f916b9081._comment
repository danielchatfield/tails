[[!comment format=mdwn
 username="Tails"
 ip="127.0.0.1"
 subject="comment 2"
 date="2011-11-25T12:06:02Z"
 content="""
> [TrueCrypt is] also portable, it can encrypt an entire partition, or just an easy to distribute container, which of course runs mac-linux-windows compatibility.

LUKS can of course encrypt entire partitions, and beyond Linux it's supported on [Windows](http://www.freeotfe.org/) and DragonFly BSD. AFAIK it's not supported on Mac OS X (yet?), though.

> [...] I would like to request that Truecrypt remains an option indefinitely. Despite its less than open nature it does have some important advantages.

Regardless of TrueCrypt's \"less than open nature\" and other issues there might be very real security reasons to not include it exactly because it supports plausible deniable encryption. Below I will detail some thought I've been entertaining for the last couple of years that I feel are ripe for venting now:

While a very cool idea, simply possessing tools supporting plausible deniable encryption could be dangerous in itself if you live in an area where the \"law\" either practices [rubber-hose \"cryptanalysis\"](https://en.wikipedia.org/wiki/Rubber-hose_cryptanalysis) (i.e. torture), or has a [key disclosure law](http://en.wikipedia.org/wiki/Key_disclosure_law) (which includes countries like UK, France, Canada). As you know, it's precisely these practices and laws that plausible deniable encryption is intended to protect against. So, imagine that you live in such an area, get suspected or arrested for some crime, that the authorities seize you computer as a result, and that they find your TrueCrypt installation on it.

**Problem 1:** If a TC volume indeed is indistinguishable from random junk, then any file that looks like random junk may be considered as TC volumes by your adversaries, even those that in fact are not TC volumes or encrypted data. 

Hence, even if you hand out keys and passphrases to the real TC volumes, your adversaries may demand keys and passphrases for the other random looking (but non-TC volume) files. You can truthfully deny that they are TC volumes all you want, but they will torture you, or throw you in jail. You're screwed.

As have been pointed out, it may still be possible to determine whether a file is a TC volume or not by using analyzers such as TCHunt. However, after learning TCHunt's technique I must say it looks pretty weak and simplistic, and that it very easily can produce false positives. In fact, I did a simple test:

    TMPDIR=$(mktemp -d)
    for X in $(seq 1 100); do
        dd if=/dev/urandom of=${TMPDIR}/test.${X} bs=1b count=20000 2> /dev/null
    done
    echo $TMPDIR
    # run TCHunt on ${TMPDIR}, i.e. the directory printed above

So, I generated 100 files of ~10 MB (but divisible by 512 bytes) of pseudo-random data generated from Linux' PRNG and then ran TCHunt on these. Every single one of them was incorrectly identified as a TC volume, so we have a 100% false positive rate. There may be better commercial alternatives to TCHunt, though. If not, the problem with false positives just strengthens problem 1. Personally I generate such files from time to time for various reasons, so I would be screwed.

**Problem 2:** Since TC supports hidden volumes, even if you disclose all your keys and passphrases to your adversaries they may insist that you have hidden volumes when you in fact don't.

This could for instance happen if your adversaries didn't find what they were looking for in the \"normal\" TC container that you supplied them keys and passphrases for. Or perhaps they found what they wanted, but the prosecutor (naturally) just wants to fuck you even more by adding a few additional years on your prison sentence for refusal of (non-existing) key disclosure. You're screwed.

The essence, or generalization, of these two problems is that plausible deniable encryption gives your adversaries \"plausible suspicion\" (in lack of a better term). Since there are so few encryption tools that allow plausible deniable encryption, choosing a tool that supports it (like TC) instead of a tool which doesn't (like dm-crypt/LUKS) may give them strong reasons to believe that you are indeed using that specific feature, and thus that you're not cooperating with them even when you really are cooperating as much as you can.

For the above reasons it seems like plausible deniable encryption will only work as intended if either one of the following statements are true:

1. You live in a sane country with no practice of rubber-hose cryptanalysis/torture, and no key disclosure laws. (Note that if you do, you really don't need plausible deniable encryption -- \"undeniable\" encryption is enough.)
2. The implementation of plausible deniable encryption you use is completely secret; it isn't public, widely used or documented anywhere. You and *everyone else* using it must be able to keep that secret even under torture and serious legal threats/implications.
3. You live in a future where more or less all encryption software supports plausible deniable encryption, so it's nothing out of the ordinary. (OTOH, in such a future key disclosure laws may just be upgraded to a complete ban on encryption. Who knows?)

Let's see how these statements pan out with Tails:

We distribute Tails globally, and since there are countries for which 1 isn't true, 1 wouldn't be true for all Tails users. Hence inclusion of TC (or similar tool) would make Tails potentially dangerous for those users. 2 is trivially untrue for TrueCrypt in particular, and tautologically untrue (per definition) in general for any other such encryption tool we ever would ship with Tails. And 3 is not the case (yet?) as you probably know.

That said, I'd love to have the above proven wrong as I see plausibly definable ecnryption as a very desirable feature.
"""]]
