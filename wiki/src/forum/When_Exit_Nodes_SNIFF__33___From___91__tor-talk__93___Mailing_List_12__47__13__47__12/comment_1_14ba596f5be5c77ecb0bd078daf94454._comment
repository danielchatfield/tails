[[!comment format=mdwn
 ip="127.0.0.1"
 subject="comment 1"
 date="2012-12-16T19:59:05Z"
 content="""
Interesting Tor-talk post by Torrorist, but I am not sure I follow the reasoning.

Do I understand this correctly?

The goals of the garden variety rogue exit node operator probably include:

* sniffing user/password combinations when users log into a website account
* sniffing user/password combinations and other information when users log into a remote shell account
* sniffing the body of emails uploaded/downloaded to/from mail servers
* sniffing chat account user/password combinations and chat conversations

The profile of an exit router which is operated as a rogue node whose only real purpose is sniffing personal information might include features such as these:

* rejects protocols such as ssh (port 22) and https (port 443) which carry encrypted traffic
* accepts/rejects pairs of protocols suggesting that the operator doesn't want to waste his time transmitting remote logins, emails, or chats which he cannot easily read, and may even suggest that the operator is trying to trick targeted browsers/servers into falling back on an unencrypted protocol
* such pairs include http (port 80) but not https (port 443), pop3 (port 110) but not pop3s (port 995), telnet (port 23) but not telnets (port 992), ftp (ports 21,22) but not ftps (990/989), irc (port 194) but not ircs (port 994)
* accepts unencrypted protocols such as dict (port 2628) which could be used to help adversaries to remotely deanonymize individuals in order to harm them
* a propensity to rudely terminate traffic when the \"interesting\" stuff has been sniffed, like dropping an unencrypted data stream soon after user/password sent

(Have I missed any?)

On the other hand, doesn't opfsproxy attempt to disguise encrypted traffic as unencrypted traffic, for good purposes?  Possibly one should be familiar with such schemes before drawing conclusions.

Note that our hypothetical rogue is assuming (probably correctly) that many people use Tor in dangerous ways, like logging into email accounts using unencrypted logons.

In any case, Torrorist attempted to enumerate suspicious exit routers by

* obtaining the configurations of all current exit routers (which is public information) from a torproject.org server
* using his ruby script to find those whose configurations appear suspicious
* considering any configuration which shows a ratio of accepted plaintext protocols to all protocols more than 50% to be suspicious

I think that criterion might be a little too crude to be really useful (too many false positives).

Another thought which often occurs to me when I see researchers describe such projects is that I am not sure that python or ruby are safe for use in machines exposed to the web, especially if you are a Tor user who must now apparently expect to become subject to sophisticated malware attacks from intelligence agencies all over the world.  

I'd rather see a two stage script in which one downloads all the exit router configurations (on the order of one thousand, I think) and then while off-line winnows this down using more stringent criteria.  And I often wonder why the Tor Project (a USA based organization) doesn't do this.  Probably they do, but don't know what to do with the results.  I suspect that they may have found from years of experience that if they shut down even crude secret police operations abusing the Tor network, they get a threatening call from the FBI acting on behalf of \"authorities\" in Turkmenistan or Kenya or Peru or ...  

I often wish that the Tor Project offered daily lists of running exit router configurations which can be downloaded over https and processed offline by curious Tor users, but suspect that they fear that too many users would react in horror by excluding the suspicious nodes, which might lead to more threatening phone calls from the FBI.  They would probably say they simply don't want their servers to be overburdened by users downloading \"lengthy\" lists.

Also, if you want people to use your script it is probably better to write it in a language which pretty much everyone already has installed on their PC or laptop, like perl for Linux users.  Python has the somewhat scary property that it can execute a script kept in a nonexecutable file, and I believe that ruby has also had some security problems over the years.
"""]]
