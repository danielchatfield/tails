[[!comment format=mdwn
 username="anonym"
 ip="127.0.0.1"
 subject="HOWO install T(A)ILS to a fully encrypted harddrive"
 date="2010-08-31T15:53:44Z"
 content="""
This is one way to install T(A)ILS to a fully encrypted harddrive (or USB stick), and it can be done either in a VM or on a real bare-metal computer. In this setup, all changes to the file system will persist, so you can install/reconfigure any software, store files etc. so they will stay after shutdown (unlike when running T(A)ILS from a LiveCD).

#Please be aware that you can seriously fuck up your anonymity/security with this setup, so it should be considered for testing purposes only.

For instance, the memory is not wiped att shutdown, so your disc encryption key and other sensitive data can be recovered from the computers RAM for some time after you turn off the computer. See: http://en.wikipedia.org/wiki/Cold_boot_attack

Also, installing programs can potentially ruin certain security features of T(A)ILS. Don't install anything related to firewalls, DNS servers, or similar network related tools unless you really know what you are doing and how T(A)ILS implements its security. Same goes with removing of reconfiguring existing software realated to those areas.

#Note that this will require some familiarity with partitioning in a linux system, so if you don't know how to do that or how to determine which device your harddrive has, you'll have to read up on that before.

Start by booting the latest T(A)ILS LiveCD on the computer/VM containing the harddrive. Once the graphical interface has started, open a terminal (e.g. gnome-terminal) and issue the commands below, in order, and carefully read all the commens (lines initated by #) for further instructions:

    # Become root
    sudo su

    # EDIT THE VARIABLE BELOW TO BE THE DEVICE FOR YOUR HARDDRIVE! As you can see,
    # for me it was /dev/hdc so I set it as such, but it could be something like /dev/hda or /dev/sdb
    # depending on your hardware
    HD=/dev/hdc

    # First make a ~100 MB bootable primary partition (for /boot) in the beginning of
    # the hd, then use the rest for another primary partition for the encrypted
    # container
    cfdisk $HD

    BOOT=\"${HD}1\"
    CRYPT=\"${HD}2\"

    # You will be asked for a keyphrace in the next step, and in order to use the
    # encryption to its fullest you need an about 40 characters long random passphrase.
    # You can generate one with the below command, where you should edit XX to be a
    # number around 40:
    pwgen -s XX 1

    # Create the encrypted container using the password generated above:
    cryptsetup -y --cipher aes-cbc-essiv:sha256 --key-size 256 luksFormat $CRYPT
    cryptsetup luksOpen $CRYPT pvcrypt
    pvcreate /dev/mapper/pvcrypt
    vgcreate vgcrypt /dev/mapper/pvcrypt

    # Next we will create partitions inside the encrypted container. If you need to know how
    # much space you have left at any time during this process, issue the command below and
    # look it up in the row saying \"Free PE / Size\":
    vgdisplay vgcrypt

    # Create a swap and a root partition using the commands below, but change the sizes as
    # needed. I just happened to have an 8 GB harddrive, so 100 MB was for the boot
    # partitioning created above, then I used 1 GB for swap and the rest, 6.9 GB, for the root.
    # Note that the swap might be unnecessary if you have a lot of RAM (>4GB) and that
    # the root will need about 2 GB just to fit the system -- anything beyond that is for your
    # files or new programs you install.
    lvcreate -n swap -L 1G vgcrypt
    lvcreate -n root -L 6.90G vgcrypt

    ROOT=\"/dev/mapper/vgcrypt-root\"
    SWAP=\"/dev/mapper/vgcrypt-swap\"

    # format the partitions
    mkfs.ext2 $BOOT
    mkfs.ext3 $ROOT
    mkswap $SWAP

    # Copy files
    mkdir /mnt/chroot /mnt/cd /mnt/squashfs
    mount /dev/cdrom /mnt/cd
    mount -o loop /mnt/cd/live/filesystem.squashfs /mnt/squashfs
    mount $ROOT /mnt/chroot
    # Note that the following command will take a minute or two to complete
    cp -a /mnt/squashfs/* /mnt/chroot 
    umount /mnt/squashfs /mnt/cd

    # Copy some stuff from running T(A)ILS that otherwise will be broken or missing
    rm -R /mnt/chroot/home/amnesia
    cp -a /home/amnesia /mnt/chroot/home
    cp -a /etc/hostname /mnt/chroot/etc
    cp -a /etc/hosts /mnt/chroot/etc
    cp -a /etc/X11/xorg.conf /mnt/chroot/etc/X11

    # If you want auto-login to X, do this
    cp -a /etc/gdm/gdm.conf /mnt/chroot/etc/gdm

    # Setup crypttab and fstab so that the system knows what partitions you have
    # and how to decrypt them:
    echo \"pvcrypt $CRYPT none luks\" >> /mnt/chroot/etc/crypttab
    echo \"proc /proc proc defaults 0 0\" >> /mnt/chroot/etc/fstab
    echo \"$ROOT / ext3 defaults,noatime,errors=remount-ro 0 1\" >> /mnt/chroot/etc/fstab
    echo \"$SWAP none swap sw 0 0\" >> /mnt/chroot/etc/fstab
    echo \"$BOOT /boot ext2 defaults,noatime,noauto 0 2\" >> /mnt/chroot/etc/fstab

    # chroot into the filesystem
    mount -t proc none /mnt/chroot/proc
    mount -o bind /dev /mnt/chroot/dev
    HD=\"$HD\" ROOT=\"$ROOT\" BOOT=\"$BOOT\" chroot /mnt/chroot /bin/bash

    # Add the amnesia user and set a (good) password
    useradd -G dialout,cdrom,floppy,audio,video,plugdev,fuse,scanner,netdev,devian-tor,powerdev -s /bin/bash amnesia
    chown -R amnesia:amnesia /home/amnesia
    passwd amnesia
 
    # Here we have two alternatives (if unsure choose alternative 1 as that is what
    # most people expect):

    # 1. Some people with previous linux experience (in particular Ubuntu users) are
    # are probably used to being able to run commands as root by typing:
    #	sudo COMMAND
    # and then entering YOUR user's password. In this setting the root account is
    # also disabled, so the only password you have to worry about is your users. If
    # you want this behaviour, enter the commands below.
    rm /etc/sudoers
    echo \"root ALL=(ALL) ALL\" >> /etc/sudoers
    echo \"amnesia ALL=(ALL) ALL\" >> /etc/sudoers
    chmod 440 /etc/sudoers
    passwd -l root

    # 2. If you don't want to use the above sudo approach for root access, but instead
    # want root to have a different password than your user, and then use the su
    # command to access root, then do the following (and remember to set a good
    # password):
    rm /etc/sudoers
    echo \"root ALL=(ALL) ALL\" >> /etc/sudoers
    passwd root

    # Fix some symlinks
    rm /etc/resolv.conf
    ln -s /etc/resolvconf/run/resolv.conf /etc/resolv.conf
    ln -s /usr/bin/Xorg /etc/X11/X

    # Remove some livecd specific stuff
    apt-get remove --yes live-helper live-initramfs aufs-modules-*
    apt-get --yes autoremove

    # Install grub. The first command (apt-get update) can be skipped. It will take some
    # time since it must download a lot of files through Tor. Running it will, however,
    # make sure that you get the latest version of grub.
    apt-get update 
    apt-get install --yes grub

    # Reinstall the mount package to fix the swapon tool, which we deliberately crippled
    # for the LiveCD. Only needed if you set up a swap above.
    apt-get install --reinstall --yes mount

    # Fix the boot partition
    mv /boot /boot.bak
    mkdir /boot
    mount $BOOT /boot
    mv /boot.bak/* /boot
    rm -R /boot.bak
    mkdir -p /boot/grub
    update-grub
    sed -i -e \"s/# kopt=root=[^ ]\+ ro/# kopt=root=$ROOT ro/\" /boot/grub/menu.lst
    update-grub
    grub-install --no-floppy $HD
    update-initramfs -k all -u
    umount /boot
 
    # Exit the chroot
    exit

    # Clean up (should not matter if any of the commands fail)
    umount /mnt/chroot/proc /mnt/chroot/dev /mnt/chroot
    cryptsetup luksClose pvcrypt

#Done!
Turn off the machine, remove the T(A)ILS CD and boot to enter your new fully persistent and encrypted T(A)ILS system.

"""]]
