[[!meta title="Tails server: Self-hosted services behind Tails-powered Tor hidden services"]]

[[!toc levels=2]]

Use cases
=========

Secretly work on a document
---------------------------

John, Jane and Miranda would like to secretly work on a
document.

Possible solutions follow.

### 1. Centrally hosted Etherpad

Tails can be used to access a centrally hosted Etherpad.

Their physical location and identities should be properly concealed
but the document itself can be intercepted by the server operators.

They would like to have other means than blind trust to keep the
secrecy.

### 2. OpenPGP-encrypted messages in a shared mailbox or a drop.io space

Tails can be used to pass GnuPG-encrypted messages through a shared
mailbox or a drop.io space.

This sounds like a pretty good answer but they are under a lot of
pressure and are likely to make mistakes. Leaking a clear-text version
to the service provider would be fairly easy under stress.

### 3. Gobby and SFTP servers behind a Tails-powered Tor hidden service

Anyone amongst John, Jane and Miranda could use Tails to host Gobby
and SFTP servers behind a Tor hidden service. Others would also use
Tails to reach them.

Keeping such servers at hand, on a live system, behind an hidden
service is likely to prevent erroneous disclosure.

The vision
==========

Let's talk about group collaboration, communication and data sharing
infrastructure, such as chat servers, wikis, or file repositories.

Hosting such data and infrastructure *in the cloud* generally implies
to trust the service providers not to disclose content, usage or users
location information to third-parties. Hence, there are many threat
models in which cloud hosting is not suitable.

Tor partly answers the *users location* part; this is great, but
*content* is left unprotected.

There are two main ways to protect such content: either to encrypt it
client-side (*security by design*), or to avoid putting it into
untrusted hands in the first place.

Cloud solutions that offer security by design are rare and generally
not mature yet. The *Tails server* project is about exploring the
other side of the alternative: avoiding to put private data into
untrusted hands in the first place.

This is made possible thanks to Tor hidden services, that allow users
to offer location-hidden services, and make self-hosting possible in
many threat models. Self-hosting has its own lot of problems, however,
particularly in contexts where the physical security of the hosting
place is not assured. Combining Tor hidden services with Tails'
amnesia property and limited support for persistent encrypted data
allows to protect content, to a great degree, even in such contexts.

This vision aims at making it easy for end-users to implement
solutions described above and based on Tor hidden services hosted on a
Tails system.

Tails server should be able to run common services like a web
server, a Jabber daemon, wiki, file repository, etc.

Data and configuration for services would be stored on an encrypted
flash media. Targeted hardware to run "Tails server" would be an
old laptop with broken hard-disk, battery, screen or keyboard;
something quite common these days.

In short, setting up a new Tails server would be done by:

1. Alice plugs a USB stick into a running desktop Tails system.
2. Alice uses a GUI to easily configure the needed services.
3. Alice unplugs the USB stick, that now contains encrypted services
   configuration and data storage space.
4. Alice plugs that USB stick (and possibly a Tails Live CD) into the
   old laptop that was dedicated to run Tails server.
5. Once booted, Alice enters the encryption passphrase either directly
   using the keyboard or through a web interface listening on the
   local network.
6. Then, Bob can use the configured services once he gets a hold on
   the hidden service address. (The *petname system for Tor hidden
   services* project would be very complementary to this one, by
   the way.)

Tails server should content itself with hardware that is a bit old
(such as a PIII-450 laptop with 256MB of RAM) and/or half broken (e.g.
non-functional hard-disk, screen or keyboard).

Roadmap
=======

[[!tag todo/research]]

This project [is
proposed](https://www.torproject.org/getinvolved/volunteer.html.en#tailsServer)
for GSoC 2012.

The challenges behind this project are:

  * Design and write the services configuration GUI [keywords: edit
    configuration files, upgrade between major Debian versions,
    debconf, Config::Model, augeas].
  * How to create the hidden service key? [keywords: Vidalia, control
    protocol].
  * Adapt the Tails boot process to allow switching to "server mode"
    when appropriate.
  * Add support, to the Tails persistence setup process, for asking an
    encryption passphrase without X, and possibly with a broken
    keyboard and/or screen [keywords: local network, SSL/TLS?,
    certificate?].

This project can easily grow quite large, so the first task would
probably be to clarify what it would need to get an initial (minimal
but working) implementation ready to be shipped to users.

Implementation
==============

Switch to "server mode" at boot time
------------------------------------

What follows is a preliminary implementation plan that allows us to
ship ISO images that are able to boot in "server mode" or in "desktop
mode".

This should be refined to integrate better into the standard Debian
Live boot process. E.g. the standard persistence support should be
used to iterate over block devices, find the one that contains the
server configuration and decrypt it.

When starting a server we *must* have the server configuration present
on a USB drive during boot, so we can simply check for its presence
with a hook in early init. If present, then we enter server mode and
don't start X, network manager, etc., otherwise we just boot Tails
in the normal fashion.

Elaborating on my suggestion above, what I describe below will have the
server mode init sequence logic happily contained in two init scripts
that are specifically made for this purpose, so no other init scripts
will be bloated with conditionals or altered in any way:

As I said, we introduce two new init scripts:

1. `server-check`, which is run as early as possible (i.e. as
   soon as the filesystem is up and we can mount USB drives)
2. `server-mode`, which is run once the network is up

`server-check` will loop through all USB drives (even the one Tails
is running from if running from USB) and for each `$X` of them, in
turn:

1. mount `$X`
2. check if `$X` contains an encrypted server configuration, e.g.
   something like `test -f /mounted/usb/encrypted-server-conf`
3. if the check failed: unmount `$X`, then continue to loop
4. if the check succeeds: keep `$X` mounted, exit the loop, and:
 4a. remove Xorg, network manager, etc. from the boot sequence
 4b. write the path to the configuration to a state file e.g.:

	echo "/mounted/usb/encrypted-server-conf" >
	  > /var/lib/live/tails-server-mode

So, if no drive contained a server configuration (i.e. all 3 and no 4
in the loop) `server-check` exits and boot continues as usual. If a
server config was encountered, its path is written to
`/var/lib/live/tails-server-mode`, which should only exist in this
case, and the USB drive containing it will be mounted.

`server-mode` will check if the server state file exists and contains
a valid path to a file, namely the server configuration. If the check
fails, boot continues as usual, otherwise the server-mode service
will, in chronological order, take care of:

1. receiving the configuration encryption password some how
2. decrypting $(cat /var/lib/live/tails-server-mode)
3. starting the ssh daemon, http server, wiki software, etc.
   using their decrypted configuration files
4. updating torrc with the decrypted configuration
5. sending tor a SIGHUP so it will reload its configuration and
   finally start the hidden service(s)

If any of the above fails an appropriate error message should be shown
to the user. Possibly we could start X and network manager (i.e. like
in a normal boot) show the error there and then let the user try to
sort out the error, e.g. by mounting the server configuration and
editing the faulty config file, or by using the GUI you talked about
to create a completely new server configuration.

Persistence
-----------

This server mode feature heavily depends on the [[todo/persistence]]
todo item.

Persistence shall always be opt-in in Tails. On the other hand a USB
stick dedicated to running a Tails server should be ideally be
bootable without a screen / keyboard which brings new issues:

- how to toggle persistence on in that case? shall we patch the
  bootloader menu to do so?
- how to enter the encryption passphrase? web interface available on
  the LAN?

Resources
---------

### Vidalia's hidden services support

In 0.3.x: was removed, "should" become a plugin someday.

In 0.2.x: works mostly well but we need to [[!taglink todo/wait]] for
[[!tor_bug 2579]] to be fixed.

### The Incognito implementation

The old Incognito actually has a very rudimentary support for hidden
services which was setup in a similar way. However, it is limited to
hosting static html pages using lighthttpd, but the script used might
be worth looking at:

- http://www.browseanonymouslyanywhere.com/incognito/uploadfiles/docs.html#hidden
- https://svn.torproject.org/svn/incognito/trunk/root_overlay/etc/init.d/hidden-service

### Anonymous Web Application Framework

https://piratenpad.de/p/AnonymousWebApplicationFramework
