[[!meta title="Automated builds and tests"]]

[[!toc levels=2]]

Rationale
=========

An automated build and test environment would be pretty useful to
ensure a few facts:

- new code does not break anything
- new build tools (`live-build`) and included software
  (`live-config`, `live-boot`) don't break anything
- updates pushed to the APT repositories we don't control (e.g. Debian's)
  don't break anything
- the quality of our releases is good enough
- power users get to test early images built from feature branches,
  or from `experimental`
- we can ask bug reporters to test an image built from a bugfix
  branch, and see if it fixes their problem

What we have
============

* An unconfigured Jenkins instance running on lizard.
* A partially automated test suite:
  - [[documentation|contribute/release_process/test/automated_tests]]
  - [[setup|contribute/release_process/test/setup]]
  - [[usage|contribute/release_process/test]]
  - [[test cases|contribute/release_process/test]] that are not
    implemented yet.

Roadmap
=======

[[!tag todo/sysadmin]]

0. Archive built ISO images to `www.lizard`:
   a. Set a NFS server up on `www.lizard`.
   a. Add a 2nd build step that `cp tails-* /some/place`, where
      `/some/place` is a NFS mount of a directory exported by
      `www.lizard`.
   a. Disable artifacts archiving.
0. Firewall the Jenkins port on `jenkins.lizard` against access from
   the other VMs.
0. Build Debian packages for our custom programs:
   a. Install Jenkins [Copy Artifact plugin](https://wiki.jenkins-ci.org/display/JENKINS/Copy+Artifact+Plugin).
   a. Setup [jenkins-debian-glue](http://jenkins-debian-glue.org/).
0. Run `jenkins-jobs update /etc/jenkins_jobs/jobs/` when the Jenkins
   jobs repository gets an update.
0. [[!taglink todo/wait]] for the [[centralized Git
   repositories|todo/centralize_Git_repositories]], then have the
   master repository push to `gitolite@puppet-git.lizard:tails`,
   e.g. using Gitolite's [mirroring support](http://gitolite.com/gitolite/mirroring.html).
0. Factor out Jenkins setup code from the
   `{jenkins,builder,www,...}.lizard` node definitions to a set of
   `tails::` Puppet modules.
0. Setup email notifications.
0. Setup IRC notifications (see [[resources|automated builds and tests/jenkins]]).
0. Run our various [[custom programs|contribute/git]]' test suite
   (see the section about Perl projects on [[automated builds and tests]])
   a. set up a `perl-tester.lizard` Jenkins slave
0. Add more Jenkins jobs such as:
   - check PO files [[validity with
     i18nspector|contribute/l10n_tricks]]
   - automated test suite
0. Think through a plugins upgrade policy and possibly create the
   needed tools.
0. Make our Jenkins visible and read-only on the web.
0. Start/stop `builder.lizard` before/after building an ISO.

What we need
============

Automated builds
----------------

Ideally, every commit pushed to Git should result in an ISO being
built, and made available online.

Automated tests
---------------

Ideally, every automatically built ISO should be automatically tested,
and the results displayed online.

Infrastructure
--------------

Putting automatic builds and automatic tests on the same physical
machine (while using
virtualization to separate concerns) saves hosting and bandwidth costs:
fresh images can be tested without being transferred.

In order to be able to build Tails in memory (which greatly speeds up builds)
and to properly test HIGHMEM memory wipes, the test server should have at
least 32 GB. Using KVM inside a KVM
virtual machine is supported by the "nested KVM" feature available since
Linux 3.1. VirtualBox (Vagrant) in KVM is not supported as of March 2013.

We could set a threshold of tests that have to be successful before publishing
one daily build image. This would prevent too-broken images to spread out and
potentially harm users.

The setup of the automated build and test server should be done
with public Puppet modules.

Resources
=========

## Jenkins

See [[our wiki page|automated builds and tests/jenkins]] dedicated to Jenkins.

## Testing tools and examples

- <http://live.debian.net/gitweb/?p=live-autobuild.git> is currently
  used to build "official" daily Debian Live images
- [buildbot](http://buildbot.net) : a continous integration bot, able to
  communicate over mail or IRC. Used by many projects.
- Tor project's [buildbot configuration](https://gitweb.torproject.org/admin/buildbot-conf.git)
- Martin Pitt
  [announces](http://www.piware.de/2013/02/umockdev-record-and-mock-hardware-for-debugging-and-testing/)
  umockdev ([source code](https://github.com/martinpitt/umockdev)),
  a set of tools to record and mock hardware for debugging and testing

## emulated boot from USB

See [[the page that's dedicated to that|automated_builds_and_tests/USB]].

## Buildbot

We [[used to have a buildbot setup|todo/automated_builds_and_tests/buildbot]].

Buildbot can be seen as a [framework](http://jacobian.org/writing/buildbot/) to
deploy continuous integration. It has no real configuration file, but
what deserves this role is a file that can be thought programatically.
Thus it provide a very flexible environment that can be customize for
most projects needs.

Some interesting pages, might be worth reading for people willing to
play with buildbot and understand its logic :

* [Chromium's buildbot config](http://src.chromium.org/viewvc/chrome/trunk/tools/build),
  which is the one driving their [builbot instance](http://build.chromium.org/)
* [Buildbot's documentation](http://buildbot.net/buildbot/docs/latest/)

[[!tag broken_window]]
