[[!meta title="USB install and upgrade"]]

[[!toc levels=3]]

Specification
=============

One should be able to easily install Tails to a USB storage device:

* by cloning an existing Tails system that is running from CD or USB;
* from another operating system, using a downloaded ISO image.

Moreover, at installation time, one should be allowed to setup an
encrypted storage space that can be used by the [[upcoming persistence
feature|todo/persistence]]; earliest versions of the installation
program must at least leave room for it so that a later version can be
make use of it. Whether this storage space should better be a second
encrypted partition or a file-backed encrypted FS shall be researched.

One should also be able to easily and non-destructively upgrade a
given Tails system installed on a USB storage device.
Non-destructively means not touching any partition or file other than
the ones managed by the Tails installation system.

Research
========

[[!tag todo/research]]

Booting methods
---------------

Tails [[ships hybrid ISO images|contribute/design/hybrid_ISO]]. dd'ing
such a file to a USB stick produces a bootable Tails system but it
overwrites any previously existing partition table. This method is
therefore not suitable for us since it does not satisfy the
"non-destructive upgrade process" requirement.

Two alternatives booting methods have been investigated:

1. **Boot ISO file**: Setup a bootloader on the USB stick that is able
   to boot an ISO image dropped into the right directory of it.
2. **Copy ISO's content**: Copy needed files (mainly the `live/`
   directory) from the ISO filesystem to the destination partition,
   and setup a bootloader that uses files in that directory. The end
   result is more or less equivalent to dd'ing the ISO image to the
   USB stick, but the process can be made in a non-destructive way.

### Grub2

#### fromiso and loopback

Debian Live now supports Grub2 and `fromiso=`. The grub.cfg that is
generated inside the binary image could be copied, adapted and used to
(loopback) boot an ISO dropped on a USB stick.

Here is how to test this.

0. Build a Debian Live iso or iso-hybrid image with a working
   `live-boot` installed in it, i.e. at least 2.0.12 (warning: Tails
   0.6 has a buggy one).
1. Create a ext2 filesystem on a USB stick partition.
2. Copy a Tails ISO file **at the root** of the USB stick partition.
3. Run `ln -s . boot` at the root of the (mounted) USB stick partition.
4. Install Grub2 on the USB stick MBR, using the USB stick partition
   as `--root-directory`.
5. Create a `grub.cfg` file in there and try a menu entry like this:

	menuentry 'test' --class debian --class gnu-linux --class gnu --class os {
	        insmod part_msdos
	        insmod ext2
	        insmod loopback
	        insmod iso9660
	        set root='(hd0,msdos1)'
	        search --no-floppy --fs-uuid --set b51975cd-c5ef-4b32-996a-2c8206516917
	        loopback loop /binary.iso
	        linux   (loop)/live/vmlinuz1 boot=live fromiso=/dev/sda1/binary.iso config
	        initrd  (loop)/live/initrd1.img
	}

Details:

* `insmod ext2` is because the partition that hosts Grub2 and the ISO
  is a ext2 one
* `(hd0,msdos1)` and the search UUID match this partition as well,
  from Grub2 point-of-view
* `/dev/sda1` is a path to this partition block device from inside the
  Live initrd
* `/binary.iso` is the path to the ISO file, relative to the root of
  the partition
* `/live/vmlinuz1` and `/live/initrd1.img` are respectively the path
  to the kernel and ramdisk relative to the root of the ISO filesystem
* `boot=live` enables `live-boot` and thus `fromiso=`
* `config` enables `live-config`

This might fails at kernel load time with following error:

    error: invalid magic number

In that case you probably need a newer Grub2 (see [[!debbug 543924]]
for details).

#### automagic ISO loopback support

- GRML [now supports booting using Grub2 loopback](http://michael-prokop.at/blog/2011/01/07/booting-iso-images-from-within-grub2/)
- comments of
  http://blog.cyphermox.net/2010/10/booting-to-iso-images-from-usb-key.html
- Super Grub Disk's
  [loopback.cfg](http://www.supergrubdisk.org/wiki/Loopback.cfg) might be
  [going upstream](http://lists.gnu.org/archive/html/grub-devel/2010-09/msg00080.html)

### syslinux' memdisk

[[!tag todo/research]]

This is similar to grub2's fromiso and should be investigated.

Resources:

- GRML [now supports booting using
  Grub2+memdisk](http://michael-prokop.at/blog/2011/01/07/booting-iso-images-from-within-grub2/);
  according to this blog post, support for doing this is in live-boot >=2.0.14-1.
- the [memdisk page](http://syslinux.zytor.com/wiki/index.php/MEMDISK)
  on the syslinux wiki
- a [blog
  post](http://blog.snow-crash.org/2010/11/cool-things-with-grub2-and-syslinux---booting-floppy-and-iso-images.html)
  with a snippet for `grub.d` to automate booting ISO images from
  Grub2, using syslinux' memdisk

### Other resources and ideas

* use grml's
  [patches to live-initramfs](http://git.grml.org/?p=live-initramfs-grml.git;a=tree;f=debian/patches) 
  to support directly booting an ISO image... merged in upstream Git,
  commit 6458a8862db68. Another of their patches (namely
  `07_support_findiso.dpatch`) adds support for the
  `findiso` boot parameter, which is needed for easy usage; this one
  has not been applied upstream yet; does it respect the
  `live-media=removable` boot parameter?
* Philip Hands' solution proposed on [[!debbug 534887]]
  uses extlinux chainloading the image's own bootloader

Frontend UI
-----------

[[!tag todo/test]]

(Testing all these is probably [[!taglink todo/easy]].)

Wikipedia has a [[!wikipedia List of tools to create Live USB systems]]
we should look at.

* `live-installer` udeb and its `live-installer-launcher` desktop
  companion allows to run the Debian Installer from the bootloader;
  paraphrasing the manual: the "Live" Debian Installer flavour will
  proceed in an identical fashion to the normal installation but at
  the actual package installation stage, instead of using
  `debootstrap` to fetch and install packages, the "live" filesystem
  image is copied to the target. After this stage, the Debian
  Installer continues as normal, installing and configuring items such
  as bootloaders and local users, etc. This must be tested.

> Not usable without a lot of work: there is way too many
> questions asked, the graphical interface overlaps the
> panels (hence unreachable buttons), it tries to create
> a new user account, etc. Forget it, even if it was nice
> to have partman handy to configure partitions and
> bootloaders.

* `live-boot`'s `todisk=DEVICE` boot parameter could be used to copy
  the entire read-only media to the specified device; the process
  could then be:
  1. boot from CD
  2. use some documentation or GUI to partition the USB stick and take
     note of its device name
  3. reboot; at syslinux prompt add the `todisk=DEVICE` parameter
     using the previously noted device name; then let the system boot
     once from the USB stick, and use some documentation or GUI to
     install a bootloader on the USB stick. This step might be
     automated in live-boot.
  4. reboot and eject the CD: the system should now boot from USB.
* Incognito's `root_overlay/usr/sbin/create-usb` seems quite nice, as
  it allows using an existing fat32 partition, but it does not
  proposes to partition the USB device first. Their own
  [TODO](https://tor-svn.freehaven.net/svn/incognito/trunk/TODO)
  contains some nice ideas about the current topic.
* Libert√© Linux' `burn-usb` creates a FAT32 partition for data and
  an ext2 partition where it copies the system to. It installs Grub on
  the USB stick.
* Ubuntu's [usb-creator](FIXME)
   - supposed to replicate exactly the CD to USB
   - does not seem to recognize non-Ubuntu CDs (0.1.16 crashes on
     Lenny, 0.1.10 does not display them in the GUI even if it the
     console output proves that it takes good note of their presence )
   - how does it handle partitions?
   - [launchpad](https://launchpad.net/usb-creator)
* [UNetbootin](http://unetbootin.sourceforge.net/)
   - works on Windows and GNU/Linux
   - has a plugin architecture that only allows rebranding and
     pre-selection of the available distributions list
   - included in squeeze and sid, easily backported to Lenny
   - works like a charm to install an ISO image to USB, but the
     syslinux menu has the unetbootin logo instead of Debian's one
   - non-destructive install: does not format the chosen partition
   - works from a running Live CD; specify /dev/cdrom as ISO diskimage
   - **TRY ME**: .img image to USB?
* [Ubuntu LiveUSB](http://klik.atekon.de/liveusb/)
   - (a bit too) simplistic
   - dedicated to "create a bootable Live USB medium from a running
     Ubuntu Live CD"
   - depending on sources, it partitions USB stick with one single
     800MB partition or one partition using the whole device; in any
     case, it unconditionally overwrites the device's content
   - able to upgrade without re-partitioning the device?
   - [launchpad](https://launchpad.net/liveusb)
* aptosid's `aptosid-on-a-stick` needs an input ISO (check again), and
  lacks partitioning capabilities, but it still deserves being looked
  at more thoroughly; see the
  [manual](http://manual.aptosid.com/en/hd-install-opts-en.htm#usb-hd).
* Fedora's `livecd-iso-to-disk`:
   - [manual](http://fedoraproject.org/wiki/FedoraLiveCD/USBHowTo)
   - [Gitweb](http://git.fedorahosted.org/git/?p=livecd)
   - cleanly and defensively written in Bash
   - supports creating a file-backed filesystem for `$HOME`,
     LUKS-encrypted by default, in the same partition where the Live
     system is installed
   - uses parted
* Fedora's [liveusb-creator](https://fedorahosted.org/liveusb-creator/):
   - works on Windows and GNU/Linux
   - "non-destructive install", which means?
   - supports FAT and EXT filesystems
   - persistent storage creation: file-backed filesystem, lacks
     partitioning capabilities
   - actively developed (as of early 2011)
   - written in Python
   - input: ISO file or real CD
   - output: extracts ISO's content to the partition
   - does not use `livecd-iso-to-disk`
   - needs to be slightly adapted/extended to support non-Fedora Live
     systems, e.g. some directory names must be made configurable
   - sidux ships a modified version:
     which does not work on Lenny due to `dosfslabel` exiting with
     error code 1 even when successful
      - [.deb](http://sidux.office-vienna.at/sidux/debian/pool/main/l/liveusb-creator/),
      - [source](http://w3you.com/liveusb-creator/liveusb-creator.htm)
* Moblin's [Image
  Writer](http://git.moblin.org/cgit.cgi/moblin-image-creator/plain/image-writer)
   - written in Python
   - simple dd wrapper with proper sanity checks
* [Mandriva Seed](http://git.mandriva.com/?p=projects/mandriva-seed.git;a=summary)
   - supports Windows and GNU/Linux
   - fork of Fedora's liveusb-creator
* [RIP‚Äôs mkusb](http://rip.7bf.de/current/mkusb.sh) and its
  [README](http://rip.7bf.de/current/mkusb.txt)
* [usb-imagewriter](https://launchpad.net/usb-imagewriter)
   - seems like a clone of the good old rawwrite with no more feature
     at all
* SUSE Studio Image Writer([[!wikipedia SUSE Studio ImageWriter]],
  [KIWI homepage](http://kiwi.berlios.de/), [source
  code](http://git.berlios.de/cgi-bin/gitweb.cgi?p=kiwi;a=tree;f=tools/burner))
   - supports Windows and GNU/Linux
   - persistent storage creation, that is?
* <http://wubi-installer.org/>: Windows installer for Ubuntu. Really relevant?
* [makebootfat](http://advancemame.sourceforge.net/boot-readme.html):
  command line utility able to create bootable USB disks
  using the FAT filesystem and syslinux
   - available in Debian
   - able to autodetect/partition/format/populate the USB disk in a
     single step without any user interaction
   - able to create disk images which are compatible with all the
     three standards USB-FDD, USB-HDD and USB-ZIP at the same time
   - could be used to do most of the low-level work
* [FUSBi](http://aligunduz.org/FUSBi/)
   - modified from UNetbootin
   - supports Windows and GNU/Linux
   - no release in 2009 nor 2010

Partitionning
-------------

* Benjamin FOURTICQ's
  [script](http://www.mail-archive.com/debian-live@lists.debian.org/msg01832.html)
  to add a persistent home-rw partition.
