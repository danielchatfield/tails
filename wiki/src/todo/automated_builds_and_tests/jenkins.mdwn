Resources
=========

- [Jenkins Best
  Practices](https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Best+Practices)
- [plugins](https://wiki.jenkins-ci.org/display/JENKINS/Plugins)
  * [Git plugin](https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin)
  * [IRC plugin](https://wiki.jenkins-ci.org/display/JENKINS/IRC+Plugin),
    but I'm told that the jenkins email notifications are way nicer
    than what this plugin can do, so see [a better way to do
    it](http://jenkins.debian.net/userContent/setup.html#_installing_kgb_client)
  * [Copy Artifact
    plugin](https://wiki.jenkins-ci.org/display/JENKINS/Copy+Artifact+Plugin)
    can be used to run a test job against the result of a build job,
    e.g. for Debian packages (think Lintian) or Tails ISO images; see
    [grml's setup
    documentation](http://jenkins-debian-glue.org/getting_started/manual/)
    that uses it.
  * [Job builder](http://ci.openstack.org/jenkins-job-builder/) provides
    one-way (Git to Jenkins) jobs synchronization; it's in Debian sid.
-  jenkins.debian.net's:
   * [setup documentation](http://jenkins.debian.net/userContent/setup.html)
   * configuration: `git://git.debian.org/git/users/holger/jenkins.debian.net.git`
- [sample nginx configuration](https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu)
- Jenkins for Perl projects:
  * [a collection of links](https://wiki.jenkins-ci.org/display/JENKINS/Perl+Projects)
    on the Jenkins wiki
  * an overview of the available tools: [[!cpan Task::Jenkins]]
  * [a tutorial](https://logiclab.jira.com/wiki/display/OPEN/Continuous+Integration)
  * [another tutorial](http://alexandre-masselot.blogspot.com/2011/12/perl-hudson-continuous-testing.html)
  * use [[!cpan TAP::Formatter::JUnit]] (in Wheezy) rather than the Jenkins TAP plugin
  * use `prove --timer` to know how long each test takes
- grml's Michael Prokop talks about autotesting in KVM during his
  [talk at DebConf
  10](http://penta.debconf.org/dc10_schedule/events/547.en.html);
  they use Jenkins:
  * [Jenkins instance](http://jenkins.grml.org/)
  * [unittests](https://github.com/grml/grml-unittests)
  * [Jenkins plugin](https://github.com/mika/grml-live-jenkins-plugin)
  * [debian-glue Jenkins plugin](https://github.com/mika/jenkins-debian-glue)
  * [kantan](https://github.com/mika/kantan): simple test suite for
    autotesting using Grml and KVM
  * [jenkins-yaml](https://github.com/varnish/jenkins-yaml) and
    [jenkinstool](http://git.gitano.org.uk/?p=personal/liw/jenkinstool.git;a=summary)
    are meant to make Jenkins configuration easier
  * the [jenkins](http://jujucharms.com/charms/precise/jenkins) and
    [jenkins-slave](http://jujucharms.com/charms/precise/jenkins-slave)
    JuJu charms may be good sources of inspiration for deployment
- [Ubuntu QA Jenkins instance](https://jenkins.qa.ubuntu.com/)
- [[!cpan Net-Jenkins]] (not in Debian) allows to interact with
  a Jenkins server: create and start jobs, get information about
  builds etc.
- [[!cpan Jenkins-NotificationListener]] is a server that listens to
  messages from Jenkins [Notification
  plugin](https://wiki.jenkins-ci.org/display/JENKINS/Notification+Plugin).
