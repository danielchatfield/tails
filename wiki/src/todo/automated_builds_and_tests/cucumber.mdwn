[[!meta title="Automated tests using cucumber"]]

About this
==========

This little glue provides for now a way to test Tails' images (or others)
against features written in cucumber. This tests use sikuli to simulate user
interactions with the UI and are written in ruby. Each features are tested
against Tails images started in fresh virtual machines thanks to libvirt/Kvm.

It can be used to automate the release testing process with a Continuous
Integration server, or for developers to implement features the "Agile Way".


Features
========

With this tool, it is possible to:

  * Create, modify and destroy kvm virtual machines meant to run Tails iso though
    libvirt.
  * Simulate user interaction with the Tails virtual machine desktop, or test
    its content.
  * Take screenshots, from the earlier Tails virtual machine boot process to
    its final shutdown, either when some event occurs or at regular intervals.
  * Read and parse the Tails virtual machine network traffic and run tests
    against it.
  * Add or remove different kind of storages (ide, usb,...) to the Tails virtual
    machine, in either a cold or hot plug way and the test the way Tails
    behaves.


Installation
============

See the [[dedicated page|cucumber/install]].


Usage
======

For now there are some steps to follow to ensure that everything is setup
correctly. In the future, we might want to automate this steps too.


## Non root $HOME installation

If you have chosen not to install rvm in the root user $HOME, you have to load
the rvm environnment variables in the root shell you are using to start this
tool.

Assuming $USER is the user whose $HOME has been choosen to install rvm and run
the tests:

    $ cd /home/$USER
    $ source .rvm/environnment/jrubry-$VERSION
    $ cd TAILS_SOURCE/features
    $ source .rvmrc

You should be prompted on the screen that you are now using jruby. Now go on with
the rest of the usual process to start this tool.


## General use

As a starter, ensure you're in the features/ directory of Tails sources. It
should have mentionned that you are using jruby when you have cd in there.

Set the DISPLAY env to something relevant (a non-used one)

    $ export DISPLAY=":8"
    $ export SIKULI_HOME="/usr/share/java"

Start a Xvfb virtual X display on it (once for all, no need to be root for
that):

    $ Xvfb $DISPLAY >/dev/null 2>&1

You can also use another more reliable way to start and monitor Xvfb, like runit
or daemontools so that you won't have to stop it yourself after executing the
tests.

This tests expect to find iso files in the top directory of the Tails sources,
as it happens after a succesfull build. It will use the newer iso file it can
find in this directory.

This behavior can be changed if you want to use an iso stored somewhere else.
For this you have to set an ISO environment variable to the iso absolute path.

You need to pass the VM domain name used to start the system under test as a
"VM" env variable, so that the script knows wich domain to start and connect
virt-viewer to.

So to run the tests:

    $ VM="VM_NAME" cucumber cucumber/

Or to test /home/$USER/src/tails.iso:

    $ ISO="/home/$USER/src/tails.iso" VM="VM_NAME" cucumber cucumber/

and see the testing process goes on :)


TODO
====

  * Full automation : integrate the management of Xvfb instances, and
    environment variable settings.
  * Sudo support.
  * ...


Resources
=========

 * [[ruby-libvirt api|http://libvirt.org/ruby/api/index.html]]
 * [[sikuli gem api|http://rubydoc.info/gems/sikuli/0.3.0/frames]]
 * [[rvm|http://rvm.io]]
 * [[nfqueue gem api|http://rubydoc.info/gems/nfqueue/1.0.1/frames]]
