[[!meta title="Test suite installation"]]

As the goal of this tool is to start Tails virtual machines, all that is needed
to use it is to install its dependecies on the system used to run the tests, and
setup the user environnment.


Caution
=======

This tool actuallly needs root privileges in order to be able to capture the
network traffic. This means either using sudo, which sadly is not currently
supported, or start it as root.

Thus it might be preferable to use a kvm virtual machine to run the tests
inside until it supports sudo, for obvious security reasons.

If you choose to use a dedicated virtual machine to run this tests, you need to
enable the nested Kvm feature on the host that will run it. This way this tool
will be able to start Tails virtual machines inside this dedicated virtual
machine using its libvirt.


Packages
========

The following packages are necessary on Debian:

 * build-essential
 * curl (if you intend to use the rvm installer)
 * git
 * xvfb
 * libvirt-bin
 * libvirt-dev
 * virt-viewer
 * libsikuli-script-java
 * libxslt1-dev
 * libxml2-dev
 * tcpdump


Jruby 1.6 with Rvm
==================

You also need a Jruby >= 1.6 environnement, which sadly isn't possible using
Debian packages yet.

The actual workaround is to use [[rvm|http://rvm.io/]].

Using the root user to start the application doesn't necessary means that you
need to install rvm in its $HOME.

It's still possible to install rvm in a dedicated user $HOME, and run the tests
in there as root, after having setup the root's shell environnment as explained
in the Usage section.

If you choose not to use the root user $HOME, you can install rvm as the choosen
dedicated $USER.

You first need to fetch and start the installer

    $ wget -O rvm.install http://get.rvm.io
    $ chmod 755 rvm.install
    $ ./rvm.install

To be available at user login, rvm needs a little integration in the
environnment. You need to adapt your terminal or screenrc settings. See the
"Integration" and "Workflow" part of [[Rvm's homepage|http://rvm.io/]].
Starting by hand the rvm command often output a link to some help to have it
nicely installed in the session.

You can then use rvm to install jruby:

    $ rvm install jruby
    $ rvm use --default jruby


Rvm heavily uses environnment variables, you can use its mechanism and modify
~/.rvm/environments/jruby-$VERSION to add the one you need (like `$SIKULI_HOME`)
to have them automatically exported too.

A .rvmrc configuration is included in the sources, which automatically configure
the use of rvm's jruby by default when you cd into the features/ directory.


Rubygems
========

Every ruby/gem related command should now use the jruby installed in $HOME/.rvm.
To get the necessary gems from github, add it to the remote sources:

    $ gem sources -a http://gems.github.com

And install the following gems:

 * cucumber
 * sikuli
 * ruby-libvirt


Configuration
=============

Usually on Debian the root user has access to qemu:///system. Check if it
works, so that virt-viewer will be able to connect to the Tails virtual machine
display.

