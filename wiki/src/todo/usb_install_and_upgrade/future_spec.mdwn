All these are ideal implementations.

Download ISO to USB
-------------------

 1. Create partition
 2. Download ISO + Extract + (feed hash function || feed GnuPG)
 3. (Verify final hash || Verify signature)
 3. Create overlay
 4. Setup bootloader (make partition bootable if needed)

Running CD to USB
-----------------

 1. Create partition
 2. Read files from CD (/live/image) + verify md5sum + write files
    to USB
 3. Create overlay
 4. Setup bootloader (make partition bootable if needed)

XXX: no need to verify GnuPG signature?

Running USB to USB
------------------

 1. Create partition
 2. Copy files from USB (XXX: /live/image ?) (XXX: verify md5?)
 3. Create overlay
 4. Setup bootloader (make partition bootable if needed)

XXX: no need to verify GnuPG signature?

In all cases: with persistent storage
-------------------------------------

 1. Create another extra partition
 2. Write:
      Tails reserve for persistent storage. Why are you looking here?
    at the beginning.

Resulting pseudo-code
---------------------

class Source(object):
    def clone(self, destination):
        raise NotImplementedError

class URLSource(Source):
    def __init__(self, url)
    def clone(self, destination)

class CDSource(Source):
    def __init__(self, path)
    def clone(self, destination)

class USBSource(Source):
    def __init__(self, path)
    def clone(self, destination)

class Destination(object):
    def live_partition_exists()
    def format_live_partition()

class UI(object):
    def get_chosen_source(self)
    def get_chosen_destination(self)
    def update_progress(self)
    
class Bootloader(object):
    def setup(destination)




source = ui.get_chosen_source()
destination = ui.get_chosen_destination()

# Create partition
if not destination.live_partition_exists():
    destination.initialize_drive()
destination.format_live_partition()

# Clone chosen source
for completion_percent, message in source.clone(destination):
    ui.update_progress(completion_percent, message)

# Create overlay
if ui.wants_overlay():
    destination.create_overlay(ui.overlay_size())

# Setup bootloader (config, files and partition table flags)
bootloader = source.get_bootloader()
bootloader.setup(destination)
