We should integrate macchanger in some way.

[[!toc levels=2]]

Use cases
=========

We could distinguish two main use-cases:

* using a public computer (e.g. in a library, Internet-cafe) => the mac
  address should not be changed, as it may bring undesired admin
  attention and/or simply forbid access to the Internet
* using a personal computer (e.g. a laptop, wherever it happens) =>
  the mac address should be changed

A way to integrate this analysis UI-wise could then be to allow, in a
[[todo/boot_menu]], to choose between the default case (that
has to be decided) and the other one, using simple words such as "I am using a
public computer" instead of speaking geek-language about mac addresses or
whatever.

As a bonus, other unrelated settings could also be automatically
changed at runtime depending on the answer to this question.

Enabling the "public computer" mode could setup the needed bits so
that every network interface has its mac address changed before
attempting to access the network.

Caveats
=======

Randomizing mac adresses has several cons:

* may trigger attention of admins of the network.
* may break in some network configuration were static addresses are
  assigned by a DHCP server based on the interface mac address, and/or
  ARP tables are fixed to avoid spoofing.

According to chapter 3.4.7 of the [Incognito's
documentation](http://www.browseanonymouslyanywhere.com/incognito/uploadfiles/docs.html),
Incognito does have an option in the boot menu and an [initrd
script](https://tor-svn.freehaven.net/svn/incognito/trunk/root_overlay/etc/init.d/macchanger),
and the randomization is done on a small part of the mac address.
It does not really solve both issues, it's still not working for
static DHCP, and if mac adresses are watched, even modifying only it's
end would probably trigger an alert (admins willing to see if mac
addresses are changing may have installed an automated way to do it,
like arpwatch).

However, as Tails is based on debian live and using network-manager
for its network configuration, it introduces new questions: what if an
USB wireless dongle is inserted in Tails after it has booted?
Network manager will automatically begin to scan the network with a
non-fake mac address. Is it a problem?

Implementation
==============

[[!tag todo/research todo/code]]

ifupdown
--------

An [ifupdown script](https://help.ubuntu.com/community/AnonymizingNetworkMACAddresses),
put in `/etc/network/if-pre-up.d/` can do the job, but this solution is
permanent and not easy to disable, as each time an interface will be
reconfigured it's mac address will be automatically changed. This
solution does not help really if we want users to be able to choose to
enable/disable it (at boot time or on a running Tails). At least it
integrates nicely in an environement where NetworkManager is in charge
of the network configuration, but still that doesn't solve the user's
choice problem.

> My take on this is that this place is the one where we can ensure
> the mac address is changed (or not) when needed; at least it works
> when network configuration is done through `ifupdown` or Network
> Manager (but not when using `ip` or `ifconfig` by hand; if we really
> want to support these, I guess that only udev rules can do the job
> properly).
> 
> Anyway: IMHO, using this `.d` directory or not is pretty unrelated
> to the method used to get the user's choice. Enabling/disabling such
> a ifupdown script is quite feasible:
>
> * if chosen at boot time: a `live-initramfs` hook will do the job,
>   based on `grep /proc/cmdline`
> * if chosen by any nice-random-desktop-UI: a suid wrapper could
>   toggle this script on/off, restore the original mac address and
>   restart Network Manager as needed.

Network Manager
---------------

Network Manager does actually support plugins, that could be a way to
interface it with macchanger, and have the user prompted before
configuring the network to ask if the interface have to be randomized
or not. A button could also be added to enable/disable this feature.
Attention have to be taken on the way it would be done at boot
time too.

An easy interface to propose to get the original mac address back, in
case Network Manager fails to get a working networking setup, would be
a nice bonus.

macchanger-gtk
--------------

A GTK interface to macchanger does exist:
[macchanger-gtk](http://www.mogaal.com/macchanger-gtk). Might be
usable as the button to let people use macchanger on a running
Tails, but it lacks a way to restore genuine hardware address. It's
packaged in Debian ([[!debpkg macchanger-gtk]]).


Partially random MAC address
============================

Our [[MAC address design document|contribute/design/MAC_address]]
explains our chosen way to generate partially random MAC addresses.

What now needs to be done is:

- [[!taglink todo/research]] the list of 20 or so most common network
  interface vendors ([[!taglink todo/easy]])
> There are web interfaces out there to query the ieee.org OUI database,
> like [this one](https://db.uga.edu/network/public/vendorcode.cgi).
> A list of the biggest ethernet vendors is quite harder to find, but
> [wikipedia](https://secure.wikimedia.org/wikipedia/en/wiki/List_of_PC_hardware_manufacturers#Network_cards)
> can help, as some other sites
> [here](http://www.mcgelec.com/Support/mfglinks/nics-wired.aspx) or
> [here](http://www.charydent.com/network-adapter.asp)
>> Folowing the wikipedia link, and from memory, 20 vendors will be hard to
>> find. Common vendors/chipset manufacturers aren't that much, at least for
>> Personnal Computers. A (probably incomplete) list would include Ralink, 3com,
>> Broadcom, Intel, Atheros, Realtek, marvell. Other vendors often build their
>> cards on chipset of these manufacturers.
>> This path (choose 20 most common vendors) seems to be the harder and the most
>> error prone one, and maybe rather choosing to randomize only the last part of
>> the MAC address while keeping the original vendor prefix would be easier.
>> Not sure to see what are the cons of this solution.

- [[!taglink todo/research]] how to take into account the media type:
  there are separate vendor IDs for wireless NICs ([[!taglink
  todo/easy]])
> On this item too, keeping the original vendor prefix might be the easiest
> implementation, considering the poor information that can be found on that
> topic.

Once this is done a script to generate a MAC address shall be written
along those lines:

	IF=? # the interface we want to change MAC address of
	VENDORS=(00:00:01 00:00:02 ...) # array of 20 most common vendor IDs
	X=$[$RANDOM%20] # random integer; 0 <= X <= 19
	RND_VENDOR="${VENDORS[$X]}:00:00:00"
	macchanger --mac=${RND_VENDOR} ${IF}
	macchanger -e ${IF}

Improving macchanger
====================

Some of our goals would be easier to achieve by patching macchanger
itself. Since it's been unmaintained upstream for a while, we've been
discussing and working with someone who has taken its maintenance over
and has already started patching it to better suit our needs:

* [Redmine project](https://labs.riseup.net/code/projects/show/macchanger)
* Git repository: `git://labs.riseup.net/backupninja.git`
* Debian packages: the maintainer of the macchanger package in
  Debian has already integrated some of these patches (uploaded to
  sid: 1.5.0-8) and is likely to go on this way. Tails `devel` branch
  uses this improved version.

Inspiration sources
===================

Haven
-----

Haven does not automatically start network-manager at boot time.
It provides shortcuts in the application menu to run macchanger-gtk
and start the network if desired.

Liberte Linux
-------------

Liberte Linux randomizes wireless MAC addresses at boot time and
allows changing wired interfaces' MAC addresses after boot, see their
`src/usr/local/sbin/mac-randomize` that uses `ifconfig IFACE hw ether`
rather than macchanger.


[[!tag release/1.0]]
