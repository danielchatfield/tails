Integrate macchanger in some way

[[!toc levels=2]]

Rationale
=========

Randomizing mac adresses has several cons:

* may trigger attention of admins of the network.
* may break in some network configuration were static addresses are
  assigned by a DHCP server based on the interface mac address, and/or
  ARP tables are fixed to avoid spoofing.

According to chapter 3.4.7 of the
[Incognito's documentation](http://www.browseanonymouslyanywhere.com/incognito/uploadfiles/docs.html),
Incognito does have an option in the boot menu and an initrd script,
and the randomization is done on a small part of the mac address.
It does not really solve both issues, it's still not working for
static DHCP, and if mac adresses are watched, even modifying only it's
end would probably trigger an alert (admins willing to see if mac
addresses are changing may have installed an automated way to do it,
like arpwatch).

However, as amnesia is based on debian live and using network-manager
for its network configuration, it introduces new questions: What if an
usb dongle is inserted in amnesia after it has booted? Network manager
will automatically begin to scan the network with a non-fake mac
address. Is it a problem?

Use cases
=========

We could distinguish two main use-cases:

* using a public computer (e.g. in a library, Internet-cafe) => the mac
  address should not be changed, as it may bring undesired admin
  attention and/or simply forbid access to the Internet
* using a personal computer (e.g. a laptop, wherever it happens) =>
  the mac address should be changed

A way to integrate this analysis UI-wise could then be to allow, in
a boot menu, to choose between the default case (that has to be decided)
and the other one, using simple words such as "I am using a public
computer" instead of speaking geek-language about mac addresses
or whatever.

As a bonus, other unrelated settings could also be automatically
changed at runtime depending on the answer to this question.

Enabling the "public computer" mode could setup the needed bits so
that every network interface has its mac address changed before
attempting to access the network.

Integration
===========

[[!tag todo/research todo/code]]

ifupdown
--------

An [ifupdown script](https://help.ubuntu.com/community/AnonymizingNetworkMACAddresses),
put in `/etc/network/if-pre-up.d/` can do the job, but this solution is
permanent and not easy to disable, as each time an interface will be
reconfigured it's mac address will be automatically changed. This
solution does not help really if we want users to be able to choose to
enable/disable it (at boot time or on a running amnesia). At least it 
integrate nicely in an environement where network manager is in charge
of the network configuration, but still that doesn't solve the user's
choice problem.

> My take on this is that this place is the one where we can ensure
> the mac address is changed (or not) when needed; at least it works
> when network configuration is done through `ifupdown` or Network
> Manager (but not when using `ip` or `ifconfig` by hand; if we really
> want to support these, I guess that only udev rules can do the job
> properly).
> 
> Anyway: IMHO, using this `.d` directory or not is pretty unrelated
> to the method used to get the user's choice. Enabling/disabling such
> a ifupdown script is quite feasible:
>
> * if chosen at boot time: a `live-initramfs` hook will do the job,
>   based on `grep /proc/cmdline`
> * if chosen by any nice-random-desktop-UI: a suid wrapper could
>   toggle this script on/off, restore the original mac address and
>   restart Network Manager as needed.

Network Manager
---------------

Network Manager does actually support plugins, that could be a way to
interface it with macchanger, and have the user prompted before
configuring the network to ask if the interface have to be randomized
or not. A button could also be added to enable/disable this feature.
Attention have to be taken on the way it would be done at boot
time too.

An easy interface to propose to get the original mac address back, in
case Network Manager fails to get a working networking setup, would be
a nice bonus.

Macchanger-gtk
--------------

It seems someone developed a [GTK interface](http://www.mogaal.com/macchanger-gtk)
to macchanger. Might be usable as the button to let people use macchanger on a 
running amnesia, but it lacks a way to restore genuine hardware address. It's
[already in debian](http://packages.debian.org/search?keywords=macchanger), including lenny.

What part of the mac address should be randomized?
==================================================

[[!tag todo/code]]

Still there is the discussion about randomizing the whole mac address
(macchanger -r) or only a small part (macchanger -e). What are the
pros and cons of each solution?

> The -r option is a very bad choice since the probability of getting
> a bogus vendor ID is at best (according to my calculations based on
> the number of registered vendors listed by macchanger and the fact
> that the vendor part of the MAC is 24 bits) 99.92%. And that doesn't
> take into account that many of the registered vendors haven't
> produced a card in decades, if ever. In other words, a -r will
> definitely make it possible to link MAC addresses between different
> amnesia sessions.
>
> The -a and -A options fixes the bigger of the two problems, i.e.
> macchanger makes sure that the vendor ID is not bogus. It doesn't take
> into account that some vendors haven't made a NIC since 1984, and that
> some are just plain uncommon (macchanger seems to choose among from it's
> vendor list with an uniform probability distribution).
>
> IMHO, -e seems to be better than -r, -a and -A, unless you happen to
> have a really uncommon vendor for your NIC.
>
> Perhaps the safest approach would be to choose vendor only among the 20
> or so most common ones, and then randomise the ending? That could be
> scripted very easily if we just knew which 20 vendors to choose among,

	IF=? # the interface we want to change MAC address of
	VENDORS=(00:00:01 00:00:02 ...) # array of 20 "good" vendor IDs
	X=$[$RANDOM%20] # random integer; 0 <= X <= 19
	RND_VENDOR="${VENDORS[$X]}:00:00:00"
	macchanger --mac=${RND_VENDOR} ${IF}
	macchanger -e ${IF}

>
> Note that there are separate vendor IDs for wireless NICs, so that would
> have to be accounted for too.
