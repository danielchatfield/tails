Our current approach to managing Tails [[/todo]] and [[/bugs]] does
not scale. We have some nice ideas to improve it slightly, but it's
not clear the result will be good enough.

[[!toc levels=2]]

# Roadmap

On the Redmine side, we should:

* [[!taglink todo/qa]] offline usage with Redmine;
  actions some of us need to be able to perform offline:
  - create a new ticket and set its metadata:
    * subject (= title) **OK**
    * description **OK**
    * tracker (e.g. feature, bug) **OK**
    * priority (e.g. low, normal, high) **OK**
    * status (e.g. new, confirmed, etc.) **OK**
    * category (e.g. incremental updates, persistence, hardware support, etc.) **OK**
    * kind of the next thing to be done (e.g. code, documentation, research, etc.) **ALMOST OK** → Can be encoded through a custom field of list type with mutiple values. It can be set by email, but only one value is supported in 1.4.4.
    * parent task → **Unsupported**.
    * assignee **OK**
    * target version **OK**
    * QA check (*this is a custom field*) **OK**
      I'm told one may add custom possible *status* values, so perhaps
      the QA check custom field could just be dropped.
    * Related issues → **Unsupported**.
  - add information to an existing ticket **OK**
  - change the metadata of an existing ticket (see metadata list above) **OK: with the same limitations**
  - delete a ticket (spam...) → **Unsupported**.
  - subscribe to a ticket over email or RSS/Atom **OK**
* [[!taglink todo/test]] the plugins we're interested in [Ague]

On the Bugs Everywhere side, we should think how hard the missing B.E.
features would be to implement. [[!taglink todo/research]]

# Wiki / Tasks

Let's keep our wiki for blueprints and research for long-term big next
features.

Let's try not to use the wiki for tasks (else it defeats the purpose of
tracking tasks), let's not try to use the tasks manager for research and other
things that would be better suited for the wiki (else it harms mostly-offline
developers).

# Specifications

## Must have

 * Should have categories (and display the related tasks in a meaningful way).
   => Redmine, bugs-everywhere
 * Should let us assign tasks to individuals
   => bugs-everywhere
 * Can handle tasks and sub-tasks
   => Redmine, bugs-everywhere
 * Create tickets over email.
   => Redmine, bugs-everywhere
 * Reply to tickets over email.
   => bugs-everywhere
 * Being able to search through tickets offline (caching).
   Ability to import a DB dump into a local instance of the webapp would be
   an acceptable way to do it, even if clearly suboptimal.
   => bugs-everywhere
 * Email notifications: subscribing to a ticket, or to new tickets, etc.
   => Redmine (for existing tickets), bugs-everywhere
 * Advanced search queries, or filters (among metadata)
   (roadmap, milestone, overview, individual dashboard)
   => Redmine
 * Hosted somewhere else **or** fully available in Debian
   (or all deps in Debian? to be discussed if need arises.)
   => Redmine (Riseup Labs & in a little bit outdated Debian),
      bugs-everywhere (needs some care)
 * milestones (target version)
   => Redmine, bugs-everywhere
 * Random users may reply to tasks.
   => bugs-everywhere

## Important

 * Blocking property
   => Redmine, bugs-everywhere
 * Change a ticket's metadata via email.
   => bugs-everywhere
 * Due time, deadlines
   => Redmine (with email reminders), bugs-everywhere

## Bonus

 * Having tags
   => bugs-everywhere
 * Possible to assign tasks to a team / to multiple people
 * Sub-tasks having precedence support or wait state or something that makes
   the "let's create all future sub-tickets for a task at the same time"
   workflow practically doable (i.e. I don't want to be shown all future steps
   that are blocked by the first one)
 * Possible to change a ticket's state from Git commit messages (todo->pending),
   bonus points if merging that branch into stable ->done, or something like
   that.
 * Reminder for deadlines.

## Unsorted

 * Encryption support.

# Past experiences

* intrigeri: I've used Trac in the past. I've recently started using Redmine, and
  like it much better. Doesn't know anything about their email interface.
* ague: Trac & Redmine
* bertagaz: Redmine is faster and easier to use, good UI. Taohe-LAFS' Trac is
  quite nicely organized.

# Available options

## Trac

* [email2trac utilities](https://subtrac.sara.nl/oss/email2trac/)

## Redmine

* [homepage](http://www.redmine.org)
* easy to setup thanks to the Debian package
* supports [issue creation or comments via
  email](http://www.redmine.org/projects/redmine/wiki/RedmineReceivingEmails),
* supports [updating ticket attributes over
  email](https://we.riseup.net/cgdev/using-email-with-redmine#sending-emails)
* the email interface, according to someone I trust who set it up and
  uses it, is quite fragile and can be a bit mysterious to setup
* apparently, there no more powerful way to interact with it
  asynchronously ([feature request for offline
  mode](http://www.redmine.org/issues/2728))
* [[!debpkg redmine-plugin-markdown]]
* Plugins of interest:
  - [Carousel](http://www.redmine.org/plugins/redmine_carousel): can be used
    for periodic actions that occur during project development process. It
    automatically generates issue assigned to the next user in the carousel
    queue every specified time period. Marked compatible with 1.4.x.
  - [Digest](http://www.redmine.org/plugins/digest): send a summary of a
    project's activity over a period of time by email. Marked as
    compatible with 1.4.x and 2.0.x.
  - [Importer](http://www.redmine.org/plugins/importer): import issues in bulk
    from .csv files. Not marked as compatible with 1.4.x.
  - [Issue checklist](http://www.redmine.org/plugins/issue_checklist):
    add checklist functionality to issues. Marked as compatible with
    2.0.x -- what about 1.4.x?
  - [Git branch hook](https://github.com/mikoto20000/redmine_git_branch_hook):
    add issue related revision by branch name. Can close tickets
    on merge. One apparently may configure the branch that, when
    merged into, triggers this behavior, thanks to the
    `merge_branch` setting. Apparently impossible to use it for
    the two-steps pending + fixed workflow we've been using,
    but we may want to change this when switching tools anyway.
  - [Silencer](http://www.redmine.org/plugins/silencer): suppress email
    notifications (at will) when updating issues. Not marked as
    compatible with 1.4.x.
  - [Whining](http://www.redmine.org/plugins/redmine_whining): email alerts
    when an issue had not been updated since X days. Not marked as
    compatible with 1.4.x.

Offline usage:

 * Sending an email can create an issue with:
   - subject: mail subject
   - description: mail body
   - tracker: keyword in mail body
   - priority: keyword in mail body
   - status: keyword in mail body
   - category: keyword in mail body
   - assignee: keyword in mail body
   - kind of next thing to be done: keyword in mail body
   - target version: keyword in mail body
   - QA check (or any other custom field): keyword in mail body
 * Sending an email with '[Project - Bug #2]' in the subject will add
   information to the ticket. Same keywords as before can be used to change
   metadata.
 * Email address in From, To, or Cc are added to watchers (if they match
   a Redmine user).
 * Clicking on *Watch* enable one to receive emails when the ticket changes.
 * Every ticket as an Atom feed. It contains all changes made to a ticket.
 * There is an atom feed with all open tickets, together with status and
   description.

## Bugs everywhere

* [Homepage](http://bugseverywhere.org/)
* General impression: nice
* Compliance: yes but
  - there are no *true* subtickets but depends
  - it is not anymore in Debian because the maintainer was not willing to
    take care of its outdated package anymore. Other bugs were wishlist.
* Features
  - totally distributed
  - very nice command line interface
  - nice BTS-like email interface
  - minimal web interface (viewing and commenting bugs)
  - well written, simple to customize

Let's see if it is possible to use Bugs Everywhere while not making
the entry barrier too high for new contributors.

### First interaction: looking

The static web output looks good enough, doesn't it?

### Second interaction: commenting

#### Solution A

Let's add <mailto:> links with the subject prepared to ease replying
to a comment over email.

(Note: supposed to work with GMail + Chrome. And others?)

#### Solution B

Let's add an option to allow a single (anonymous) action in the web
interface: commenting... while disabling other kinds of changes.

Pros: more familiar to some kind of potential new contributors.

Cons: we have to handle comments spam somehow. Urghl.

### Third interaction: assigning to self

#### Solution A: over Git

Let's allow _anonymous_ Git push to our Bugs Everywhere repository.

Changing a ticket's metadata then requires cloning, installing Bugs
Everywhere, running a `be` command or doing the changes inside the
(local) web interface, and then commit + push.

#### Solution B: over email

Sending an email whose body includes a command phrased as a special
pseudo-header.

#### Discussion

Both are clearly non-trivial, but probably not harder than
understanding our tasks workflow and processes ;) Yes, it adds to the
list of what you have to learn to contribute.

### Fourth interaction: subscribing to a ticket

The command-line interface allows subscribing to email notifications
(all changes, or only ticket creation, or specific tickets).

Presumably one may use email commands to subscribe. [[!tag
todo/research]] If it is the case, then we can have the web interface
display a <mailto:> link on each ticket page to subscribe to it.

## Other distributed task trackers with Git backend

 * https://lwn.net/Articles/281849/
 * https://www.ohloh.net/p/cil/ in Debian
   → No active development since 2010?
   → https://github.com/maspalio/cil
 * http://github.com/jeffWelling/ticgit/
 * http://ditz.rubyforge.org/ in Debian
   → The version in Wheezy is from 2009 but it is still in active
     development
   - nice *but* impossible to modify/comment bug through web interface
 * http://bugseverywhere.org/
   → In Squeeze and Sid but not Wheezy ;)
   → Static HTML bug repository dumps for online browsing: discared?
 * https://github.com/bkeepers/gaskit#readme
   → Ruby web application with Git backend
   → Is it possible to use it through the command line?
 * http://www.mkgnu.net/scmbug
   → Latest version from 2011, previous one from 2009

## Others

 * https://en.wikipedia.org/wiki/GNATS in Debian
 * https://en.wikipedia.org/wiki/GLPI in Debian
 * https://en.wikipedia.org/wiki/Launchpad_%28website%29 in Debian
 * https://en.wikipedia.org/wiki/Redmine in Debian
   → We can ask for an instance to Riseup
   → Demo: https://labs.riseup.net/code/projects/crabgrass/
   → http://www.chrisstucchio.com/blog/2012/idli.html
 * https://en.wikipedia.org/wiki/Roundup_%28issue_tracker%29 in Debian
 * https://en.wikipedia.org/wiki/Trac in Debian
   → https://subtrac.sara.nl/oss/email2trac
   → "sd" support is totally broken, no upstream anymore, removed from Debian
   → http://www.chrisstucchio.com/blog/2012/idli.html
 * https://en.wikipedia.org/wiki/Zentrack
 * https://en.wikipedia.org/wiki/BugTracker.NET
 * https://en.wikipedia.org/wiki/Bugzilla
   → better than it used to be, but would be a pain to host?
 * https://www.chiliproject.org/
   → https://www.chiliproject.org/projects/chiliproject/wiki
     - email interface
     - wiki, forum, etc.

## Discarded

 * https://en.wikipedia.org/wiki/Veracity_%28software%29
   → Distributed version control system and bugtracker but not using Git
 * http://www.fossil-scm.org/ in Debian
   → Distributed control system but no Git backend (only Git import/export)
 * https://en.wikipedia.org/wiki/OTRS in Debian
 * https://en.wikipedia.org/wiki/Request_Tracker in Debian
   →  bertagaz doesn't like them : overkill, no so nice to use
 * https://en.wikipedia.org/wiki/Mantis_Bug_Tracker in Debian
   → Discarded by intrigeri and bertagaz

[[!tag broken_window]]
