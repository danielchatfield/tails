Our current approach to managing Tails [[/todo]] and [[/bugs]] does
not scale. We have some ideas to improve it slightly, but it's
unlikely the result will be good enough, so we will instead migrate
to Redmine.

[[!toc levels=2]]

# Roadmap

* [[!taglink todo/test]] the Redmine Importer plugin
* [[!taglink todo/research]] how to implement our "Next thing to
  do" workflow.
* [[!taglink todo/discuss]] if we care about migrating closed tickets?
  Asked to tails-dev on February 7th.
* [[!tag todo/code]] write a conversion script to import our existing
  tickets
* update developers documentation
* migrate!
  - import existing tickets
  - setup rewrite rules from the ikiwiki tickets URL to the new ones
  - remove tickets that are not blueprints from ikiwiki
* If needed, have additional plugins packaged and installed to fine
  tune our processes.

# Wiki / Tasks

Let's keep our wiki for blueprints and research for long-term big next
features.

Let's try not to use the wiki for tasks (else it defeats the purpose of
tracking tasks), let's not try to use the tasks manager for research and other
things that would be better suited for the wiki (else it harms mostly-offline
developers).

# Specifications

## Must have

 * Should have categories (and display the related tasks in a meaningful way).
   => Redmine, bugs-everywhere
 * Should let us assign tasks to individuals
   => bugs-everywhere
 * Can handle tasks and sub-tasks
   => Redmine, bugs-everywhere
 * Create tickets over email.
   => Redmine, bugs-everywhere
 * Reply to tickets over email.
   => Redmine, bugs-everywhere
 * Being able to search through tickets offline (caching).
   Ability to import a DB dump into a local instance of the webapp would be
   an acceptable way to do it, even if clearly suboptimal.
   => bugs-everywhere
 * Email notifications: subscribing to a ticket, or to new tickets, etc.
   => Redmine (for existing tickets), bugs-everywhere
 * Advanced search queries, or filters (among metadata)
   (roadmap, milestone, overview, individual dashboard)
   => Redmine
 * Hosted somewhere else **or** fully available in Debian
   (or all deps in Debian? to be discussed if need arises.)
   => Redmine (Riseup Labs & in a little bit outdated Debian),
      bugs-everywhere (needs some care)
 * milestones (target version)
   => Redmine, bugs-everywhere
 * Random users may reply to tasks.
   => bugs-everywhere

## Important

 * Blocking property
   => Redmine, bugs-everywhere
 * Change a ticket's metadata via email.
   => Redmine, bugs-everywhere
 * Due time, deadlines
   => Redmine (with email reminders), bugs-everywhere

## Bonus

 * Having tags
   => bugs-everywhere
 * Possible to assign tasks to a team / to multiple people
 * Sub-tasks having precedence support or wait state or something that makes
   the "let's create all future sub-tickets for a task at the same time"
   workflow practically doable (i.e. I don't want to be shown all future steps
   that are blocked by the first one)
 * Possible to change a ticket's state from Git commit messages (todo->pending),
   bonus points if merging that branch into stable ->done, or something like
   that.
 * Reminder for deadlines.

## Unsorted

 * Encryption support.

# Redmine

* [homepage](http://www.redmine.org)
* easy to setup thanks to the Debian package
* supports [issue creation or comments via
  email](http://www.redmine.org/projects/redmine/wiki/RedmineReceivingEmails),
* supports [updating ticket attributes over
  email](https://we.riseup.net/cgdev/using-email-with-redmine#sending-emails)
* the email interface, according to someone I trust who set it up and
  uses it, is quite fragile and can be a bit mysterious to setup
* apparently, there no more powerful way to interact with it
  asynchronously ([feature request for offline
  mode](http://www.redmine.org/issues/2728))
* Textile syntax. Pandoc knows how to convert our existing Markdown to
  Textile, but still, having Markdown support would be awesome.
* Git integration won't easily work with our many-branches workflow,
  but we can probably do without for a while.

## Plugins of interest

* Markdown syntax:
  - [redcarpet formatter](https://github.com/alminium/redmine_redcarpet_formatter)
    (ITP: [[!debbug 685483]]): Marked as compatible with 1.x and 2.x,
    but the version that is being packaged is the one for 2.x.
    Depends on [[!debpkg ruby-redcarpet]] that is in Wheezy, but not
    in Squeeze, and may be a pain to backport due to a few missing build-deps.
  - [Markdown formatter](https://github.com/bitherder/redmine_markdown_formatter)
    Depends on [[!debpkg ruby-rdiscount]] that is in Wheezy, but not
    in Squeeze, and a pain to backport (due to the gem2deb (>=
    0.3.0~) dependency). Untouched since 2010.
  - [Markdown Extra formatter](https://github.com/juno/redmine_markdown_extra_formatter/tree)
    Depends of [BlueFeather
    gem](http://ruby.morphball.net/bluefeather/index_en.html) that is
    not in Debian. Untouched since 2010.
* [Carousel](http://www.redmine.org/plugins/redmine_carousel): can be used
  for periodic actions that occur during project development process. It
  automatically generates issue assigned to the next user in the carousel
  queue every specified time period. Marked as compatible with 1.1.x
  and 1.4.x.
  > Looks interesting, but most (if not all) tasks we do switches for
  > depend on our availability etc., so I'm not sure an automated
  > solution would do. --intrigeri
* [Digest](http://www.redmine.org/plugins/digest): send a summary of a
  project's activity over a period of time by email. Marked as
  compatible with 1.4.x and 2.0.x. The [sample email
  output](https://github.com/drewkeller/redmine_digest/blob/master/screenshot_emailoutput.png)
  does not make me think this is any better than some way (feed
  reader or rss2email) to subscribe to the project's activity.
* [Importer](http://www.redmine.org/plugins/importer): import issues in bulk
  from .csv files. Compatible with 1.1.x. We do need this to import
  existing tickets.
* [Issue checklist](http://www.redmine.org/plugins/issue_checklist):
  add checklist functionality to issues. Marked as compatible with
  2.0.x -- what about 1.4.x or older? Having something lighter than
  sub-tickets could be good, but certainly not critical. We'll see.
* [Git branch hook](https://github.com/mikoto20000/redmine_git_branch_hook):
  add issue related revision by branch name. Can close tickets
  on merge. One apparently may configure the branch that, when
  merged into, triggers this behavior, thanks to the
  `merge_branch` setting. Apparently impossible to use it for
  the two-steps pending + fixed workflow we've been using,
  but we may want to change this when switching tools anyway.
  According to Git log, should at least support Redmine 1.4.x and
  2.0.x.
  We can start using Redmine and see later how much we need something
  like this.
* [Silencer](http://www.redmine.org/plugins/silencer): suppress email
  notifications (at will) when updating issues. Marked as
  compatible with 1.1.x, not with 1.4.x.
  > I'm not sure why we would want this. --intrigeri
* [Whining](http://www.redmine.org/plugins/redmine_whining): email alerts
  when an issue had not been updated since X days. Marked as
  compatible with 1.1.x, not with 1.4.x.
  Would be very useful, looks easy to package and install.
* [Custom Workflows](http://www.redmine.org/plugins/custom-workflows):
  define own rules of issue processing, e.g. change issue properties
  or create sub-task if some conditions are met, enforce policies...
  Marked as compatible with 1.2.x to 2.1.x.
  Hopefully we won't need it, but it's still good to know it
  exists.

## Offline usage

 * Sending an email can create an issue with:
   - subject: mail subject
   - description: mail body
   - tracker: keyword (`Tracker:`) in mail body
   - priority: keyword (`Priority:`) in mail body
   - status: keyword (`Status:`) in mail body
   - category: keyword (`Category:`) in mail body
   - assignee: keyword (`Assigned To:`) in mail body
   - kind of next thing to be done: keyword in mail body
   - target version: keyword (`Fixed version:`) in mail body
   - QA check (or any other custom field): keyword (name of the
     custom field) in mail body
 * Sending an email with '[#24175]' in the subject will add
   information to the ticket. Same keywords as before can be used to change
   metadata.
 * Email address in From, To, or Cc are added to watchers (if they match
   a Redmine user) when *creating* a new ticket over email.
 * Clicking on *Watch* enables one to receive emails when the ticket changes.
 * Every ticket has an Atom feed that contains all changes made to a ticket.
 * There is an Atom feed with all open tickets, together with status and
   description.
 * Missing: set parent task, set related issues, delete ticket.

## Convert and import

**Note**: this is an initial rough draft, that probably misses tons of
things to do, but should be enough to run some initial tests to
confirm the general idea is workable.

1. Tag `todo/*` pages that should be kept as blueprints.
1. Split tickets that have several `todo/*` tags, and save the
   parent/child relationship. In the end, each ticket should only have
   one `todo/*` tag.
1. Add a `External Id` custom field.
1. Add a `Kind of next thing to do` custom field whose possible values
   are the same as our current `todo/*` tags.
1. Write a custom ikiwiki plugin to:
   - save original ikiwiki ticket name as `External Id` column
   - save parent/child relationship
   - turn Markdown into Textile
   - wrap the whole ticket information into a CSV line
   - filter out `toc`
   - save `todo/*` tags into the "Kind of next thing to do" column
   - XXX: what to do with blueprints? create a parent ticket matching
     the blueprint and linking to it?
1. Run ikiwiki with this special plugin, then merge all these CSV
   lines to produce a first CSV file that can be imported with the
   Importer plugin.
1. Import the first CSV file, using `External Id` as `Unique Column`.
1. Build a (External Id, Redmine Id) mapping.
1. With a modified version of the ikiwiki plugin, plus this mapping
   information, produce a second CSV files with tickets description
   modified so that links to other tickets are updated to use Redmine
   ticket linking syntax.
1. Import the second CSV file, using `External Id` as `Unique Column`
   again, and enabling the *Update Existing Issues* option.
   Links between tickets should now be good.
1. Generate the Apache rewrite rules from the (External Id, Redmine
   Id) mapping. Skip blueprints while doing so.

[[!tag broken_window]]
