As Incognito does, the RAM must be erased at shutdown to protect
against Cold Boot Attacks.

> Done in 432781c8f2ba211300, not tagging done since:

>> I always thought that smem was ridiculously slow on Incognito -- sure it
>> fills all RAM several times with stuff, but RAM is crazy fast (ok,
>> generating random numbers isn't, but smem was still unreasonably slow). Even
>> if I had smem being called in its insecure mode (only one pass of zeros) it
>> still seemed to take forever before Incognito shut down even though it
>> should take a few seconds. So a year back or so I investigated this further.
>> smem is a very simple program; it works by allocating a 64 KB chunk of
>> memory, which then is cleared using the chosen method, and then smem
>> allocates a new chunk (and so on...) *without* free()ing the previous one.
>> It simply keeps on like that until the memory runs out (i.e. calloc()
>> returns NULL), and then it quits.

>> What I've noticed when I've run smem in verbose mode (so you can see its
>> progress) is that the (at least approximately) last chunk seems to be the
>> culprit (it can take an hour to complete!). My theory is that since the
>> chunk size is so small, smem manages to eat up practically all memory, so
>> much that some of the kernel's inner workings (or some other system critical
>> code) that depend on being able to dynamically allocate memory stops
>> working, putting the system to a grinding halt. 

>> The problem also occurs on my main Gentoo system and the (at the time)
>> current version of Kubuntu. Today I tried it again on Debian Lenny, which
>> didn't crash, but the process was killed (by oom-killer) at ~the last chunk.
>> I have a feeling that is because at that time the stack cannot grow since
>> there is no memory, and thus any functions called by smem will cause the oom
>> error. Even though this is pretty ugly, smem has basically done all it's
>> work at this point (only the last few chunks aren't cleared properly) so
>> maybe this is acceptable? In any case, my personal opinion is that smem is a
>> bit of a hack and I think I'd prefer some other solution, if available. BTW,
>> I've also tried smem with swap, and surprisingly "smem -ll" (i.e. only do
>> calloc() (which zeros the memory) and *nothing more*) then seems to work.
>> AFAIK swap usage should be completely transparent and thus not make any
>> difference, so I'm confused.

>>> We have investigated a bit about this very last memory sector taking a
>>> while to be cleaned and the smem process being oom killed. The kernel was
>>> detecting memory overcommitment and using oom killer to stop smem, which was
>>> taking a long time to happen, since smem deals itself with things like
>>> capabilities and is trying to erase sensitive memory segments. Actually, the 
>>> /etc/init.d/live-initramfs script is tweaking two kernel parameters before 
>>> calling smem following [the kernel vm overcommit documentation](http://git.kernel.org/?p=linux/kernel/git/stable/linux-2.6.31.y.git;a=blob_plain;f=Documentation/vm/overcommit-accounting;hb=HEAD).
>>> This stops this behaviour. Tests show that smem is doing its jobs until it has
>>> erased everything, but we haven't tried to read the memory seeking for 
>>> remaining data.
>>> We've also tried to play with smem's `oom_adj` kernel setting the same way
>>> openssh does as explained in [the kernel proc documentation chapter 3.1](http://git.kernel.org/?p=linux/kernel/git/stable/linux-2.6.31.y.git;a=blob_plain;f=Documentation/filesystems/proc.txt;hb=HEAD),
>>> but it seems after some testing that the first solution is working well
>>> alone. So commit 432781c where all that takes place needs to be cleaned 
>>> of the `oom_adj` trick. There is also a patch to upstream live-initramfs package
>>> which ask on installation if the live cd has to erase memory or not. It can be 
>>> preseeded via debconf, it's ready and we just need to talk about that with the
>>> upstream dev.
>>> 
>>>> This patch lives in the `feature/smem` branch of our own
>>>> `live-initramfs` [[contribute/git]] repository.
>>>> 
>>>> Our current solution works nicely, thus tagging `done`.
>>>>>
>>>>> Futher testing did show that smem wasn't really nicely working (see [[bug
>>>>> report|bugs/buggy_smem_on_shutdown]]).
>>>>>
>>>>> Reason was that our tricks to have smem write all free memory were also
>>>>> permissive enough to let smem overwrite on the memory cache, were all
>>>>> needed files for the shutdown were just put right before in the
>>>>> live-initramfs init script. Actually there are no real way in the linux
>>>>> kernel to have a software writing only on the free memory and keepiing the
>>>>> cache untouched. After all, cache is also free memory.
>>>>>
>>>>> The recently added [[progress bar script|todo/smem_progress_report]] is
>>>>> taking care to kill smem when it has erased all the free mem reported by
>>>>> /proc/meminfo, thus letting the cache untouched. Some caution were also
>>>>> added in the live-initramfs init script to free all the cache before
>>>>> caching files needed to shutdown by using /proc/sys/vm/drop_caches.
>>>>> Memory overcommitment tricks have been moved from the live-initramfs init
>>>>> script to the smem progress bar wrapper, and a companion script was added
>>>>> to cache all the needed files to wrap smem's output.
>>>>>
>>>>>> => tagging pending

[[!tag todo/done]]

