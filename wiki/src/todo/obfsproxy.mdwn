The [Obfsproxy](https://www.torproject.org/projects/obfsproxy.html.en) 
project exists to achieve the benefits of Tor's 
bridges together with traffic obfuscation.

# Use cases

## Censorship circumvention

Since bridges are easily detected and blocked in some areas (in
particular China, but also places where wholesale SSL blocking is
used), something like obfsproxy is needed in Tails.

## Hiding Tor usage

In situations where both reliability *and* obfuscation are required
despite an adversary having control of the user's local network
*traffic obfuscation* must also be employed. This traffic obfuscation
is **imperative** where the user's welfare or liberty my be
jeopardised by her use of Tor.

# Implementation

The branch `feature/obfsproxy` currently adds rudimentary support for
obfsproxy. It's possible to just add a bridge like `obfs2 $IP:$PORT`
through Vidalia's settings and it works (also works with
[[bridge-mode|todo/bridge_support]] so that even in its current
implementation (which doesn't use `DisableNetwork`), Tails prevents
Tor from talking to the network, and makes Vidalia prompt the user for
bridges, `obfs2` or not).

Merged in Tails 0.15.

# Future

A complete TBB+Obfsproxy bundle is available from the project's
page. The default configuration file is set to connect via a selection
of preconfigured obfs2 bridges. It all just works<sup>tm</sup>. Is
shipping such a static list of bridges something we want to consider
for Tails? It completely contradicts the "Hiding Tor usage"
requirement, but such users could opt-out of using the static list and
instead have to input bridges manually, as is currently the case when
using [[bridge-mode|todo/bridge_support]].

> Would supplying the Obfsproxy project's default obfs2 bridge list in our torrc but with <span class="command">UseBridges 0</span> offer the best solution in all cases?

>> That's a good question. IMHO that list can not be considered
>> secret, so it doesn't help with the "hiding Tor usage" use case. In
>> fact, providing a static list may help users that have such a
>> threat model to screw themselves by mistake. I think TBB+Obfsproxy
>> doesn't have that use case (it's all about censorship
>> circumvention) so shipping a static list may be a bad idea.
>>> +1 defining your own obfsproxy bridges

[[!tag release/2.0]]
