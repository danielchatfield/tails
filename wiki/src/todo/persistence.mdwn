Data persistence is a somewhat tricky topic in a Live system context,
especially one explicitely designed to avoid leaving any trace of
its use.

Some real-life usecases however require to setup some kind of
data persistence, which should then be carefully introduced
and supported.

Usecases
========
It remains to determine which usecases are of interest for our users and thus should be support. Some possible ones are:

* All of /home is persistent. This is very convenient for users who have complex configurations for certain applications, like IMs, MUAs, gpg an the like.
    - Clueless users could do really bad configurations that would persist and thus expose them even after a reboot.
    - amnesia upgrades to configurations in $HOME would be pretty difficult to apply without breaking the users own configuration.
    - Great care should be given to the potential leaks of web browser cache and history, IM logs and similar applications and their data, so that even if the /home is compromised, it should be difficult for the attacker to tell what exact internet resources and services have been used. Unless the user has explicitly chosen to store such information (bookmarking a site, adding someone to their contact list or address book, activated IM chat logs etc.). 
* System wide persistence. This would give users fine-grained control of the system and possibility to set it up exactly after their own expectations.
    - All the problems of a persistent /home applies but are amplified to a system-wide scale, for instance
        - users can also fuck up the firewall configuration
        - sensitive information may leak outside of /home, like to /tmp, /var/log etc.
        - get a persistent virus or other malware
    - amnesia upgrades would be near-impossible without breaking stuff.
* A persistent non-home data store for whatever random files the user wants to have persistent.
* Persistent application installations. If a user need some program not present in amnesia per default it can be quite annoying to fetch the apt information (which takes a lot of time over tor) and download it (also slow), it could be nice to have a persistent directory (or similar) where all .deb-files are installed during init.
* Persistent application specific configurations.
    - This might be relevant for the following applications:
        - gpg/ssh/vpn/OTR keys/configurations
        - certificates
        - IM and MUA configurations (since these can take a several steps to setup which is annoying to redo for every amnesia session)
    - Perhaps it would be possible to make a tool so that the user can choose exactly what files/directories that should be persistent, and when to update them? Whith such a general solution the above things would not have to be implemented individually and could be present as default suggestions in the tool.

[[!tag todo/research]]

Specification bits
==================

Once a persistent volume is enabled, two operation modes should be
supported:

* with read-write access in order to be allowed to update persistent
  files
* with read-only access to **only** be able to *use* persistent files
  (e.g. a GnuPG keyring) without leaving any new trace; the
  (read-only) persistency store must be merged with a "diff" branch on
  ramdisk using aufs, so that the mountpoint is seen as writable by
  applications

Moreover:

* The persistent data must be stored using strong, well-known, Free
  Software, peer-reviewed encryption tools.
* Read-write access to a persistent data store must never be the
  default, and must require a voluntary user action, such as choosing
  "with read-write persistent data" non-default item in the boot menu.
* Blacklist fixed storage devices from the search for persistent
  volumes? Preventing the risk of using a malicious persistent volume
  seems more important than supporting the rare "I want to store my
  persistent volume on a fixed hard-disk" use-case.
    - grml's patch against `live-initramfs` to optionally set all
      harddisk devices to read-only mode was applied upstream as
      `97846cf1b1a`

Implementation
==============

Debian Live already supports
[several kinds of persistence](http://live.debian.net/manual/html/persistence.html).
The "home automounting" flavor seems like a nice starting point, but
it needs to be extended a bit:

* support a read-only mode (e.g. using aufs or similar), e.g.
  using a "persistent-ro" boot parameter
* support enabling `$HOME` persistence while disabling full
  persistence

Both seem easy to implement and contribute to the upstream
`live-initramfs` (everything happens in `scripts/live`).

cryptsetup-encryption of the persistent volumes has been supported
since
[commit 5d38c26a3480357730c4913d298a1a6318a7b08c](http://lists.alioth.debian.org/pipermail/debian-live-changes/2008-February/002320.html)
to `live-initramfs`.

Persistence features are supposed to be rewritten in `live-initramfs` 2.x.
