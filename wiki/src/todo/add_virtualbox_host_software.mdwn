Rationale: running a proprietary OS in a virtual machine *inside*
Tails would be useful by folks who cannot afford doing without their
preferred Windows-only piece of software but still want to work in a
relatively secure environment.

The compressed .deb files (4.0.x) take 20MB.

(Beware:  in case it matters, we're shipping quite special guest
packages -- custom backport of the guest tools and drivers, built
against the xorg from squeeze-backports).

IIRC, VirtualBox host software sets iptables/netfilter up in a way
that makes the guest system bypass the existing firewall / or be
blocked by it, so some care should be taken on this side.

> I haven't seen any indication of this after years using VirtualBox.
> I don't even think port-forwarding for the NAT virtual adapter uses
> it.

The bridge network adapter is another potential problem. Can the
amnesia user set up a VM using the bridge adapter to bypass the
firewall?

# Previous Work

Whonix (back in times where it still was called TorBOX) implemented something very similar.

https://sourceforge.net/p/whonix/wiki/OneVM/

 * Tor was running on the host = Tails in this case.
 * Some operating system was running inside the Virtual Machine.
 * iptables / bridging was used to route all VM traffic through Tor.
 * It was probable affected by identity correlation through circuit sharing.

# Other resources

* [How To Set Up A TOR Middlebox Routing All VirtualBox Virtual Machine Traffic Over The TOR Network](http://www.howtoforge.com/how-to-set-up-a-tor-middlebox-routing-all-virtualbox-virtual-machine-traffic-over-the-tor-network)
  (Using an adaptation of this we could instruct users to set up each
  guest with Bridged Adapter on `vnet0` and then it should magically
  rout all traffic from the VM through Tor. Identity correlation 
  could be dealt with by using a dedicated TransPort with the
  IsolateDestAddr option set.)

[[!tag todo/code]]
