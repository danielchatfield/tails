[[!toc levels=2]]

Rationale
=========

GDM was rewritten between Debian Squeeze and Wheezy in ways that
entirely break our custom greeter. So, we have to either adapt our
greeter to the new GDM (if possible at all), or switch to another
display manager and port our greeter to it.

Roadmap
=======

1. [[!taglink todo/research]] how to use GDM in Wheezy, without
   spending too much time on it
1. [[!taglink todo/research]] a bit more potential lightdm drawbacks,
   especially in the area of accessibility (both in a Python GTK
   greeter and in a WebKit greeter one)
1. decide about GDM vs. lightdm
1. if going with lightdm: decide what language and UI toolkit to use
1. migrate tails-greeter code to the new chosen DM, [[revamping the
   UI|todo/tails-greeter: revamp UI]] along the way

Candidates
==========

GDM
---

**Summary**: GDM nowadays looks not very inviting (not to say
hostile...) to us custom greeter developers.

Wheezy's GDM removes features such as setting the keyboard layout.

It's not clear if the rest of the `GdmGreeterService` interface
changes, and I was not able to find any developer documentation
on this.

The way the greeter component is started seems to have changed (e.g.
I had to rename `tails-greeter.desktop` to
`gdm-simple-greeter.desktop` to have it started at all, and the result
displays no window at all). I was not able to find any documentation
on this. Nor did I find any existing custom greeter for GDM 3.x.

lightdm
-------

**Summary**: lightdm looks very promising, but it may be lacking in
some areas (accessibility) and some of the exciting (optional) stuff,
such as writing the UI as a web page, is quite a bit hackish.

[lightdm](https://launchpad.net/lightdm) has made huge progress since
the time we considered it in the early pre-tails-greeter days:

* it's now used by default in Ubuntu:
  [unity-greeter](https://launchpad.net/unity-greeter), but also
  [lightdm-gtk-greeter](https://launchpad.net/lightdm-gtk-greeter) for
  Xubuntu and Lubuntu, [KDE Greeter](http://projects.kde.org/lightdm)
  for Kubuntu
* a design goal is to be cross-desktop, and to separate the backend
  from the GUI; in practice, there are at least [4
  greeters](https://en.wikipedia.org/wiki/LightDM) in active
  development, and a few more example ones, so one may think upstream
  won't silently break the [well-documented
  interface](http://people.ubuntu.com/~robert-ancell/lightdm/reference/)
  without caring about downstreams
* upstream find it important enough to have various greeters to [blog
  about it](http://www.mattfischer.com/blog/?p=5) and give an overview
  of how to do it
* it knows how to set the language and keyboard layout
* one may write a greeter in any language that supports GObject
  introspection (examples exist at least in C, Vala and Python)
* acceptable security: wasn't that good in the beginning IIRC, but
  only one CVE filed (and it was in 2011), so should be good enough.
  Ubuntu ships an AppArmor profile for lightdm, no idea how
  restrictive it is though.
* for development purposes, a VM is a must for full scale testing, but
  `lightdm --test-mode --debug` starts a greeter in a window inside
  your existing session, as an unprivileged user (and logs to
  `~/.cache/lightdm/log/x-*-greeter.log`)
* [lightdm-webkit-greeter](https://launchpad.net/lightdm-webkit-greeter)
  and [lightdm-pywebkit-greeter](https://github.com/lamikae/lightdm-pywebkit-greeter)
  allow writing greeters in HTML/CSS + JavaScript... in case we want
  a Web-like look'n'feel, and possibly make it easier for people who
  are more into design to contribute to our greeter.

One should have a look at possible drawbacks, though:

* accessibility features, or lack thereof?
  - Unity Greeter has [some accessibility
    support](http://www.iloveubuntu.net/lightdms-unity-greeter-receives-accessibility-support):
    at least it knows how to run the Orca screen reader and the
    onboard onscreen keyboard, and it knows how to set a high-contrast
    GTK theme. Not running a full GNOME session, window manager
    included (contrary to GDM), forces them to manage a few things by
    hand, but it still does not look that crazy.
* Wheezy's, sid's (1.2.3-1) and experimental's (1.4.0-1) lightdm don't build
  GObject introspection data, while Ubuntu does -- how easy is it to
  enable it, and in turn enable us to write greeters in something else
  than C? Propose a patch for [[!debbug 699821]]. [[!tag todo/code]]
* JavaScript can't run arbitrary commands nor create files, so
  a WebKit greeter could not work exactly the same way as current
  tails-greeter does (worst case: at least with pywebkit-greeter, the
  JS code passes back messages encoded in a URL using
  `document.location.hash` to the small Python adapter that received
  in through the `navigation-requested` signal -- this way, the Python
  adapter can take care of the side effects; the jQuery [serialize
  method](http://api.jquery.com/serialize/) allows to pass a set of
  form elements this way; the webkit-greeter more
  elaborately builds a JS `lightdm` class so that the JavaScript code
  can call outside, but this is written in C and thus harder to build
  upon)
* Arbitrary data can be passed from the pywebkit greeter as arguments
  to JS functions, once serialized in JSON, using the WebKit
  `execute_script` method.
