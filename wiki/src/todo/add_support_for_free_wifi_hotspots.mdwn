[[!tag todo/research]]
[[!tag todo/code]]

[[!toc levels=2]]

Rationale
=========

Many ISPs now have a large number of "free" WiFi access points based
on the modem/router boxes they install at their customers home.
Examples: FreeWifi, NeufWifi, Fon, probably others worldwide.

A lot of these run a captive web portal (often using a
catch-all-DNS-requests system) where potential user can authenticate.

Such hotspots are pretty useful but currently unusable in Tails due
to DNS torification and Tor enforcement.

We should implement a way to fix this.

Implementation ideas
====================

Using WWW::Mechanize::Shell
---------------------------

For each kind of hotspot:

* list of possible ESSID
* optional: allocated IP address classes
* optional: network test script?
* optional: SSL certificate fingerprint?
* a WWW::Mechanize::Shell script

Main script in in /etc/NetworkManager/dispatcher.d.

Test current connection against known hotspots.

When connected to a known hotspot, starts WWW::Mechanize::Shell
script. Values are entered through a callback than will uses
Gtk2::Notify and some custom widgets. Known login/passwords should be
put in gnome-keyring with a browser like completion system (enter
first letters, pick login, password is prefilled). Maybe we could use
the same login/password database as Epiphany.

For hotspots that requires a periodic refresh, we can run another
WWW::Mechanize::Shell script in a loop. NetworkManager is meanwhile
monitored through DBUS to kill the loop if connection is lost. If loop
fails try once more through default script before displaying a
notification.

Using existing applications
---------------------------

Looks like there is at least two Python apps doing this already:

* [autowifi](http://www.manatlan.com/page/autowifi)
* [autologin-applet](http://antoine.mairesse.free.fr/autologin-applet/)

Using a non-Torified web browser
--------------------------------

Another implementation possibility: Liberte Linux provides a
non-Torified browser running under a specially designated user. "It
is intended to be used in cases where a web setup is necessary in
order to initiate an Internet connection (such as Wi-Fi Hotspots
registration)."

Details are in their source code:

* `liberte/src/home/anon/bin/unsafe-browser`
* `liberte/src/usr/local/sbin/unsafe-browser`
* `liberte/src/usr/local/sbin/fw-reload`
* git grep unsafe-browser

However, using `ssh -X` or sudo combined with xhosts permissions
brings issues such as shared clipboard, access to the whole screen and
more. Running a new X session using `gdmflexiserver --xnest` sounds
much safer; having this other session isolated, e.g. using LXC, would
offer more protection against untrusted content read by the unsafe
browser.

Beta testers
============

* San Bergmans <info@sbprojects.com>: FON network, KPN hotspots in the
  Netherlands
