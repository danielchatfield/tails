[[!tag todo/research]]
[[!tag todo/code]]

[[!toc levels=3]]

Rationale
=========

Many ISPs now have a large number of "free" WiFi access points based
on the modem/router boxes they install at their customers home.
Examples: FreeWifi, NeufWifi, Fon, probably others worldwide.

A lot of these run a captive web portal (often using a
catch-all-DNS-requests system) where potential user can authenticate.

Such hotspots are pretty useful but currently unusable in Tails due
to DNS torification and Tor enforcement.

We should implement a way to fix this.

Implementation
==============

Using a non-Torified web browser
--------------------------------

### User interface

Let's call it "Unsafe web browser". When executed we:

0. Show a dialog asking the user for verification, while also briefly
   explaining that the unsafe browser won't be anonymous.
0. If yes, we start a separate Iceweasel instance.
0. The Iceweasel profile should use a theme with scary colors, but it
   should be deactivated when Windows camouflage is activated.
0. Add a small visual cue to "amnesia branding" addon (which will be
   the only cue for Windows camouflage users),
0. Load an appropriate start page which explains all the issues.

### Implementation details

The following is implemented in `feature/unsafe-browser`.

For convenience, not imagined security, we implement this in a
chroot. Before starting the unsafe browser we create and aufs union
"branch" of the filesystem root which we adapt to suite our needs:

0. We set the default DNS servers to those obtained through DHCP.
0. We uninstall any offending Iceweasel addons (Torbutton, FoxyProxy).
0. We configure Iceweasel to not use any proxies.
0. We set the Icewesel theme to one with "scary colors" (but not if
   the Windows camouflage is activated).

Then we just run a chroot:ed instance of Iceweasel, shown on the
amnesia users `$DISPLAY`, running under a user which has been exempt of
all restriction in our firewall and forward. The firewall exception
should not allow loopback connection as access to Tor, Polipo, pdnsd and
ttdnsd it may open some classes of new deanonymization attacks against
Tails users.

When Iceweasel exits we tear down the chroot. We also restart Tor (and
Vidalia) if Tor isn't working so it quickly can bootstrap if the user
used the unsafe browser to login to a hotspot/captive portal.

### TODO

* Set the start page to an appropriate page that explains
  all the issues.

* Set some pref in the chroot which will activate a small visual
  cue in the "amnesia branding" addon. This will be useful when
  the windows camouflage is activated, since it disables the theme
  which otherwise clearly marks the browser different.

* Make it compatible with [[todo/kiosk_mode]]: remove the unsafe
  browser user and launcher when started in kiosk mode.

### Future plans

* When LXC becomes a viable, secure solution for creating isolated
  jails the above chroot approach will be easily adaptable to that.

* Notify the user when `wait_for_tor_consensus()` fails during time
  syncing, telling them that *maybe* they're behind a captive portal
  and should use the Unsafe Browser to register/login.

Complementary ideas
===================

The following things could try to automate the login to the hotspot
so that the unsafe browser only is necessary as a fall back.

Using WWW::Mechanize::Shell
---------------------------

For each kind of hotspot:

* list of possible ESSID
* optional: allocated IP address classes
* optional: network test script?
* optional: SSL certificate fingerprint?
* a WWW::Mechanize::Shell script

Main script in in /etc/NetworkManager/dispatcher.d.

Test current connection against known hotspots.

When connected to a known hotspot, starts WWW::Mechanize::Shell
script. Values are entered through a callback than will uses
Gtk2::Notify and some custom widgets. Known login/passwords should be
put in gnome-keyring with a browser like completion system (enter
first letters, pick login, password is prefilled). Maybe we could use
the same login/password database as Epiphany.

For hotspots that requires a periodic refresh, we can run another
WWW::Mechanize::Shell script in a loop. NetworkManager is meanwhile
monitored through DBUS to kill the loop if connection is lost. If loop
fails try once more through default script before displaying a
notification.

Existing hotspot connection applications
----------------------------------------

Looks like there is at least two Python apps doing this already:

* [autowifi](http://www.manatlan.com/page/autowifi)
* [autologin-applet](http://antoine.mairesse.free.fr/autologin-applet/)

Captive portal detection
------------------------

hellais and friends are working on
[ooni-probe](https://gitweb.torproject.org/ooni-probe.git) which may be
interesting, depeding on how stealthy the probe is.

Beta testers
============

* San Bergmans <info@sbprojects.com>: FON network, KPN hotspots in the
  Netherlands
