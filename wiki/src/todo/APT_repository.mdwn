Instead of cluttering our main Git repository with Debian source and
binary packages, we'd better setup an APT repository for our custom
packages.

[[!toc levels=2]]

Overview
========

We use one single APT repository hosting multiple *suites*:

* We have a (read-only) suite for every past release: `0.9`,
  `0.10.1`, etc.
* We have a suite for each *main* branch: `stable`, `testing`, `devel`
* We have a suite for each *topic* branch: `bugfix/*`, `feature/*`.
  **Important note**: the APT suite corresponding to a given Git topic
  branch contains *only* the packages this branch adds to the tag or
  *main* branch it diverged from.
* We also have a less formal `unstable` suite, that should not be used
  by any Tails git branch; it can be used as hosting space for other
  packaging work we might do, e.g. acting as upstream or
  Debian maintainers.

The suite(s) to use as sources for APT, during the build and inside
the resulting system, are determined at Tails build time
(`auto/config`). See details in the *Build system* section bellow.

We manage our APT repository with
[reprepro](http://mirrorer.alioth.debian.org/).

Private side
============

Manage an APT repository using reprepro. Allow importing packages,
creating new suites, merging, freezing, etc.

Left to do
----------

[[!tag todo/code todo/sysadmin]]

* Allow importing packages, creating new suites, merging, freezing,
  etc.; see the *Documentation* section bellow.
* test basic operations to check suite and pull names are in the
  supported set, and multiple pulls in the `Pull:` field are supported
* import binary and source packages from our Git repository:
  - currently used branches
  - past releases... at least the most recent ones, depending on how
    much pain it takes to do it.
* tell reprepro to email what `processincoming` does: <file:///usr/share/doc/reprepro/manual.html#hooks>
* publish our Puppet module

Done
----

* reprepro initial setup
* scan the Tails Git repository on a regular basis, detect new bugfix
  or feature branches, and accordingly:
  - generate `conf/distributions`
  - generate `conf/incoming`
  - generate `conf/pulls`
  - create new suites in the APT repository

HTTP access
===========

This is the http:// public APT repository that will be used at Tails
build time.

Left to do
----------

[[!tag todo/sysadmin]]

* setup HTTP access to this APT repository

Build system
============

The build system must add the relevant APT sources:

* if the version in `debian/changelog` was released already (i.e.
  a matching tag exists), then add the suite corresponding to this
  release (e.g. `0.10` or `0.10.1`);
* else, if building from the `testing` branch, add the `testing` suite
* else, if building from the `devel` branch, add its own suite

Also, if we're building from a bugfix or feature branch, add its
own suite.

This logic was implemented and integrated into our build system
(`feature/apt-repository` branch).

Workflow
========

[[!tag todo/documentation todo/code]]

Design and document the actions, possibly write helper scripts, needed
when...

Importing a new package
-----------------------

Add this configuration snippet to your `dupload` configuration:

	$config::cfg{'tails'} = {
	        fqdn => "incoming.deb.tails.boum.org",
	        method => "scp",
	        incoming => "/srv/reprepro/incoming/",
	        dinstall_runs => 1,
	};

(`dput` lovers, please contribute your own snippet.)

Carefully prepare and build your package. Usual precautions, (Lintian
etc.) apply.

Make sure the `Distribution:` field in your `.changes` file matches
the suite you want the package to land in.

Sign the `.changes` file with a key that is in the uploaders list:

	$ debsign $CHANGES_FILE

Upload the files to the incoming queue:

	$ dupload --to tails $CHANGES_FILE

reprepro will automatically notice the new files and import them into
the suite specified in your `.changes` file.

Check the result:

	$ reprepro list $SUITE $PACKAGENAME

Merging a topic branch
----------------------

When a Git *topic* branch is merged into a *main* branch, the
corresponding similar operation must be done on the APT suites; in
reprepro terminology, this operation is called a *pull*.

Check the pull would do what you want:

	$ reprepro checkpull $DEST_SUITE $SRC_SUITE

Do the actual pull:

	$ reprepro pull $DEST_SUITE $SRC_SUITE

Example:

	$ git checkout devel
	$ git merge feature/icedove
	$ ssh incoming.deb.tails.boum.org \
	     sudo -u reprepro reprepro pull devel feature-icedove
	$ git push

Note: if pull reveals itself to be impractical, the [grml
way](https://github.com/grml/grml-infrastructure/blob/master/repo-cookbook)
can be a valid alternative: they don't use reprepro pull feature, but
instead copy all packages from one suite to another with a small hack:

	$ reprepro dumptracks grml-testing  | \
	  awk '/ pool\/.*\/.*\.deb/ {print $1}' | \
	  xargs -n 1 basename | cut -d _ -f 1 | \
	  sort -u | xargs reprepro copy grml-test grml-testing

Freezing devel into testing
---------------------------

Merge `devel` branch into `testing` in Git, and hard reset `testing`
suite to the current state of the `devel` suite.

Releasing a point-release
-------------------------

(from the stable branch)

tag in Git, fork `stable` APT suite into `$NEW_VERSION`.

Releasing a major release
-------------------------

(from the testing branch)

tag in Git, fork `testing` APT suite into `$NEW_VERSION`

Post-release
------------

After merging stable or testing into devel, e.g. increment the version
number in devel's `debian/changelog`.

Contributing without privileged access
--------------------------------------

Non-core developer without access to the "private" APT infrastructure:
they would add the .deb they want to their Git branch as we have been
doing until now, push the result on repo.or.cz or whatever... and at
merge time, we would rewrite their history to remove the .deb, and
import it into our APT repo.
