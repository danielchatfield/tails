This TODO item is at the [[!taglink todo/discuss]] and [[!taglink
todo/research]] stage.

[[!toc levels=2]]

# Rationale

Also, in general I'm worried about unauthenticated NTP. There probably
is a whole bunch of fingerprinting attacks an attacker could mount if
it could pose as the NTP server and mess with the user's time.

# Authenticated NTP

As of NTPv4 the Autokey protocol has been implemented which enables
public key based authetication. According to the friendly people at
#ntp@freenode, a gpg like authentication scheme (i.e. get the public
key of the server, configure to use that server with that key, and
that's it) was implemented in 4.2.6 (latest stable) which fits our
needs perfectly. It remains to research exactly how that works.
Here are a few things to consider:

* We cannot use pool.ntp.org, which perhaps would be the optimal way
  to prevent fingerprinting of amnesia users. This is due to the fact
  that we need a key for each server we want, and far from all servers
  in the pool has autokey enabled. So we will have to use a fixed,
  predetermined and thus public set of servers since we need to ship
  their public keys with amnesia.

* For redundancy, more than one server need to be added. But how many?
  How much do we have to trust each server? How does the size of the
  set of servers affect fingerprinting and how does it relate to
  trust? Etc.

* We likely should contact the owners of all autokey-enabled servers
  and ask if they want to support our cause -- we don't want to
  [[be like D-LINK](http://digg.com/hardware/Open_Letter_to_D-Link_about_their_NTP_vandalism).

* One outstanding problem is that very few open access (i.e.
  available to all) ntp servers support Autokey, and even fewer the
  particular gpg-like scheme since it require the latest stable ntp
  which has only been out since december 2009. Reasons for the low
  adoption of autokey in general might be that people don't know or
  care about it, the extra complexity of configuration, difficulty of
  setting up ways to distribute keys to the clients (which is not part
  of the protocol -- but with the new pgp like scheme this becomes
  easier for clients), and extra strain on the servers due to the
  added crypto operations needed.

=> Authenticated NTP is a long term goal for us, but not usable for
the time being. Let's (try to) use HTP in the meantime.

# HTP

[HTP](http://www.clevervest.com/twiki/bin/view/HTP)

HTP is not really a protocol, but uses a feature from HTTP, aka web
traffic. According the specifications of HTTP (RFC 2616) a web server
needs to put a timestamp in a response to a web browser request. In
web browsers you don't see the HTTP headers, but these headers
contain a timestamp in Greenwich Mean Time (GMT), accurate in
seconds.

These timestamps, from various web servers which you may specify, can
be used to extract a pretty good time. 

So well, that's not as accurate as NTP, but maybe it could be a better
fit for our system than NTP…

## Fingerprinting?

It would need to go in the clear with an exception in the firewall
config. Is that safe? Could this be used to fingerprint
amnesia/incognito users? Is that something we want to avoid?

> HTP probably isn't widely used, so if a connection can be identified
> as HTP, it very likely was done by an amnesia user.

### fingerprinting via the servers set being used

It could be used to fingerprint amnesia/incognito users if a subset
of the queried webservers' admins share their logs. Choosing a bunch
(HTP author suggests 4) of unrelated servers that are unlikely to
share user data should be enough of a protection against
this threat.

### fingerprinting via unusual http behaviour of the HTP client

The HTP Perl client sets the http user-agent as `htpdate/$version`.

> [[!taglink todo/code]]: hack it to use the same user-agent as
> iceweasel/torbutton.

Furthermore, its "connection pattern" is pretty suspicious:
a web-browser loading foo.com/index.html would complete the whole
exchange and download index.html + any referenced resources whereas
htpdate/htpd drops the connection once it's got the first http header.

> [[!taglink todo/discuss]]: hack it to to complete the http exchange?

## Sources?

What sources should be trusted? This is of course also a problem
with NTP.

> amnesia's HTP pool could be based on stable and reliable webservers,
> including:
>
> * two servers whose admins are likely to take great care of their
>   visitors' privacy: <https://www.torproject.org/> and
>   <https://www.eff.org/>
> * one (?) server managed by adversaries of the two "trusted" ones,
>   in order to prevent identifying data to be shared:
>   <https://mail.google.com> (!)
> * one more or less "neutral" server: https://secure.wikimedia.org/

## Certificate validation

Is the HTP client behaving as it should (e.g. exit with a loud
warning without setting the time) when there is a problem with the
certificate when using HTTPS?

> As the htpdate Perl client − that only queries one server − makes
> use of the `LWP::UserAgent` Perl module, it can be configured with
> environment variables to achieve certificate verification. See the
> [`Crypt::SSLeay` documentation on (annotated)
> CPAN](http://annocpan.org/~DLAND/Crypt-SSLeay-0.57/SSLeay.pm)
> for details.
>
> However, I've not looked at the other available implementations (a
> Perl daemon, C client and a C daemon). Choosing one that supports
> querying several servers and calculating some kind of mean result
> would probably be a more sensible decision.

