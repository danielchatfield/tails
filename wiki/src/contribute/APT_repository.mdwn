[[!toc levels=2]]

To avoid cluttering our main Git repository with Debian source and
binary packages, we have setup an APT repository.

[[!toc levels=2]]

Overview
========

We use one single APT repository hosting multiple *suites*:

* We have a (read-only) suite for every past release: `0.9`,
  `0.10.1`, etc.
* We have a suite for each *main* branch: `stable`, `testing`, `devel`
* We have a suite for each *topic* branch: `bugfix/*`, `feature/*`.
  **Important note**: the APT suite corresponding to a given Git topic
  branch contains *only* the packages this branch adds to the tag or
  *main* branch it diverged from.
* We also have a less formal `unstable` suite, that should not be used
  by any Tails git branch; it can be used as hosting space for other
  packaging work we might do, e.g. acting as upstream or
  Debian maintainers.

The suite(s) to use as sources for APT, during the build and inside
the resulting system, are determined at Tails build time
(`auto/config`). See details in the *Build system* section bellow.

We manage our APT repository with
[reprepro](http://mirrorer.alioth.debian.org/).

The Puppet modules used to manage this part of our infrastructure are
listed on our [[contribute/Git]] page.

Basically, a cronjob fetches and scans the Tails Git repository every
few minutes, detects new branches, and accordingly:

- generates `conf/distributions`
- generates `conf/incoming`
- create new suites in the APT repository

Build system
============

The build system adds the relevant APT sources:

* if the version in `debian/changelog` was released already (i.e.
  a matching tag exists), then add the suite corresponding to this
  release (e.g. `0.10` or `0.10.1`);
* else, if building from the `testing` branch, add the `testing` suite
* else, if building from the `experimental` branch, add the `experimental` suite
* else, if building from the `devel` branch, add its own suite

Also, if we're building from a bugfix or feature branch, add its
own suite.

This logic is implemented in Tails 0.14~rc2 and later.

SSH access
==========

One must configure their SSH client to connect to the APT server:

	Host incoming.deb.tails.boum.org
		Port 3003

HTTP access
===========

This is the http:// public APT repository used at Tails
build time. The `tails::reprepro` Puppet class sets nginx up to
serve that.

Workflow
========

Creating a new branch
---------------------

Push your branch to Git and wait a few minutes for the new APT suite
to appear.

Importing a new package
-----------------------

### Building a package

Make sure the `Distribution:` field in your `.changes` file matches
the suite you want the package to land in (e.g.
pass `--changes-option=-DDistribution=feature-torbrowser` to
pdebuild's `--debbuildopts`).

Make sure to have the `.changes` file include the original source
archive (`.orig.tar.{gz,bz2,xz}`) if it is not already in our APT
repository; this can be done by passing `-sa` to pdebuild's
`--debbuildopts`.

### Configuring dupload

Add this configuration snippet to your `dupload` configuration:

	$config::cfg{'tails'} = {
	        fqdn => "incoming.deb.tails.boum.org",
	        method => "scp",
	        login => "reprepro",
	        incoming => "/srv/reprepro/incoming/",
	        dinstall_runs => 1,
	};

(`dput` lovers, please contribute your own snippet.)

### Uploading and importing process

Carefully prepare and build your package. Usual precautions, (Lintian
etc.) apply.

Carefully check the `.changes` file (especially the `Distribution`
control field, and the included files list; the former can be fixed
with the `changestool(1)` command, from [[!debpkg reprepro]]).

Sign the `.changes` file with a key that is in the uploaders list:

	$ debsign $CHANGES_FILE

Upload the files to the incoming queue:

	$ dupload --to tails $CHANGES_FILE

reprepro will automatically notice the new files and import them into
the suite specified in your `.changes` file.

Check the result:

	$ ssh reprepro@incoming.deb.tails.boum.org reprepro list $SUITE $PACKAGENAME

<a id="workflow-merge-topic-branch"></a>

Merging a topic branch
----------------------

When a Git *topic* branch is merged into a *main* branch, the
corresponding operation must be done on the APT suites.

Example:

	$ git checkout devel
	$ git merge feature/icedove
	$ ssh reprepro@incoming.deb.tails.boum.org \
	     tails-merge-suite feature-icedove devel
	$ git push

(Note that unfortunately, contrary to what whoever with a Git
background would guess, the reprepro operation called *pull* is not
what we want: it pulls from *all* other suites into the ones specified
on the command-line.)

<a id="workflow-merge-main-branch"></a>

Merging a main branch
----------------------

When a Git *main* branch (`devel`, `experimental`, `testing`,
`stable`) is merged into another *main* branch, the corresponding
operation must be done on the APT suites.

1. Save the list of packages currently present in the APT suite we
   want to merge *into*, e.g. `reprepro list experimental`.
2. Merge the APT suites [[the same way as when we merge a topic
   branch|APT_repository#workflow-merge-topic-branch]].
3. Make sure not to re-add, into the branch we merge into, any package
   that was removed from it, but still is in the branch we merge from:
   e.g. when merging `devel` into `experimental`, it may be that
   `experimental` had some packages removed (e.g. due to previously
   merging a topic branch into it, whose purpose is to *remove* custom
   packages). To this end, compare the resulting list of (package,
   version) in the `experimental` APT suite with the one saved before
   the merge, check Git merges history if needed, apply common sense,
   and remove from `experimental` the packages that were removed from
   it a while ago, and were just erroneously re-added by the
   merge operation.

<a id="workflow-freeze"></a>

Freezing devel into testing
---------------------------

1. Merge `devel` branch into `testing` in Git
2. (Manually) hard reset `testing` suite to the current state of the
   `devel` one:

   a. First, merge `devel` into `testing`

      	$ ssh reprepro@incoming.deb.tails.boum.org \
      	      tails-merge-suite devel testing

   b. Then, [[merge the APT suites|APT_repository#workflow-merge-main-branch]].

   c. Eventually, make it so the `testing` and `devel` packages lists
      are *exactly* the same in the end (this is a *hard* reset, not
      the usual merge).

<a id="workflow-post-tag"></a>

Tagging a new Tails release
---------------------------

Once the new release's Git tag is pushed, a cronjob should create
a new APT suite on the APT repository's side within a few minutes.
This new APT suite is called the same as the new release version.
One may check it has appeared in `~reprepro/conf/distributions`.

Then, the APT suite corresponding to the branch that was used to
prepare the release (namely:  `stable` if this is a point-release,
`testing` if this is a major one) must be copied to the new empty APT
suite that just appeared:

	$ ssh reprepro@incoming.deb.tails.boum.org \
	     tails-merge-suite testing 0.14

<a id="workflow-post-release"></a>

After a new Tails release is out
--------------------------------

After [[merging `stable` or `testing` into
`devel`|APT_repository#workflow-merge-main-branch]], increment the
version number in devel's `debian/changelog` so that next builds from
the `devel` branch do not use the APT suite meant for the
last release.

If the release was a major one, then [[merge testing into
stable|APT_repository#workflow-merge-main-branch]].

Giving access to a core developer
---------------------------------

1. Give SSH access to the `reprepro` user on the system that hosts
   reprepro (using the `ssh_authorized_key` Puppet resource).
2. Import the developer's public GnuPG key into the `reprepro` user's
   GnuPG keyring -- should be doable using Puppet, some day
3. Add the developer's OpenPGP key ID to `$reprepro_uploaders` in our
   `tails::reprepro` Puppet module. Deploy.

Contributing without privileged access
--------------------------------------

Non-core developer without access to the "private" APT infrastructure:
they would add the .deb they want to their Git branch as we have been
doing until now, push the result on repo.or.cz or whatever... and at
merge time, we would rewrite their history to remove the .deb, and
import it into our APT repo.
