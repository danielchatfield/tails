... including:

[[!toc levels=1]]

Update included files
=====================

Website
-------

Merge the `master` branch into the one used to build the release.

AdBlock patterns
----------------

Patterns are stored in
`config/chroot_local-includes/etc/iceweasel/profile/adblockplus/`.

Update Changelog
================

	./release NEW_VERSION PREVIOUS_RELEASED_TAG

example:

	./release 0.3 0.2

This populates the Changelog with the Git log entries.

Now cleanup some parts of it (semi-)automatically:

	perl -pi'' -e 's/\A  \[ IkiWiki::Plugin::po::change \]\n//' debian/changelog
	perl -pi'' -e 's/\A  \* updated PO files\n//' debian/changelog
	perl -pi'' -e 's/\A  \[ 127\.0\.0\.1 \]\n//' debian/changelog
	perl -pi'' -e 's/\A  \[ amnesia \]\n//' debian/changelog
	perl -pi'' -e 's/\A  \[ anonym \]\n//' debian/changelog
	perl -pi'' -e 's/\A  \[ T\(A\)ILS developers \]\n//' debian/changelog
	perl -pi'' -e 's/\A  \[ Tails developers \]\n//' debian/changelog
	perl -pi'' -e 's/\A  \* Added a comment\n//' debian/changelog
	perl -pi'' -e 's/\A  \* Added a comment:.*\n//' debian/changelog
	perl -pi'' -e 's/\A  \* todo\+\+\n//i' debian/changelog
	perl -pi'' -e 's/\A  \* todo--\n//i' debian/changelog


... then launch an editor for the needed cleanup of the result.


Build images
============

[[Build images|build]] and carefully read the build logs to make sure
nothing bad happened.

SquashFS files order
--------------------

Build ISO images, profile them and update `squashfs.order` in the Git
repository. Then rebuild images.

See [[todo/improve_boot_time_on_cd]] for details.

Testing
=======

Until [[todo/automated_builds_and_tests]] are setup, some minimal, manual testing
has to be done by the person doing the release, in addition to the
real-world tests done by fellow beta-testers.

The manual testing process [[is documented on a dedicated
page|release_process/test]] in order not to clutter this one too much.

Generate the Torrents
=====================

First, create a directory with a suitable name for every image to be
released, such as `tails-i386-squeeze-0.7`.

Second, copy the built images to these brand new directories and
rename it to fit our `tails-ARCH-DEBIAN_CODENAME-VERSION.iso` naming
convention e.g.:

	mv tails-i386-squeeze-0.7-20110303.iso \
	  tails-i386-squeeze-0.7.iso

Third, generate detached GnuPG signatures for every published image,
in the same directory as the image; e.g.

	gpg --armor --default-key BE2CD9C1 --detach-sign *.iso

Fourth, generate the SHA-256 hash of every image to be released,
in the same directory as the image; e.g.

	sha256sum tails-i386-squeeze-0.7.iso \
	  > tails-i386-squeeze-0.7.iso.sha256

Fifth, create a `.torrent` file for every directory to be published:

	mktorrent -a \
	  'https://www.les-renseignements-genereux.org/tracker/announce,http://z6gw6skubmo2pj43.onion:8080/announce' \
	  <DIRECTORY>

Sixth, check the generated `.torrent` files metainfo, e.g.
using `btshowmetainfo`, to make sure they don't contain
unwanted information.

Seventh, generate the SHA-256 hash of every generated `.torrent` file:

	sha256sum tails-i386-squeeze-0.7.torrent \
	  > tails-i386-squeeze-0.7.torrent.sha256

Eighth, generate detached GnuPG signatures for every published
`.torrent` file:

	gpg --armor --default-key BE2CD9C1 --detach-sign \
	  tails-i386-squeeze-0.7.torrent

Upload images
=============

## Upload to HTTP mirrors

- upload
- make sure every webserver listed in the `dl.amnesia.boum.org` round
  robin pool has the new version
- test downloading

## Announce, seed and test the Torrents

Announce and seed the Torrents using whatever box you can.
A decent, stable and permanent Internet connexion is required.

Test them with a BitTorrent client running in a different place.

Update the website and Git repository
=====================================

Rename the `.packages` file to remove the `.iso` part of its name.

Add the `.iso.sha256`, `.iso.asc`, `.packages`, `.torrent` and `.torrent.asc`
files to the Git repository's `wiki/src/torrents/files/` directory.

Write the announce for the release in `news/version_X.Y.mdwn`.

Write an announce listing the security bugs affecting the previous version in
`security/` in order to let the users of the old versions know that they have to
upgrade.

Update the latest version in `sidebar.html`.

Replace tags todo/pending and bugs/pending with todo/done and done
tags.

Update the [[features]] page.

Then add the updated `debian/changelog` and you should be ready to
record the last commit before tagging happens:

	git commit -m "releasing version ${NEW_VERSION}"

Tag the release in Git
======================

	git tag -u BE2CD9C1 -m "tagging version ${NEW_VERSION}" "${NEW_VERSION}"

Go wild!
========

Push the last commits and the release tag to our Git repository:

	git push --tags
