[[!toc levels=2]]

See the [[release_schedule]].

Pre-freeze
==========

upgrade i2p
-----------

See [[contribute/design/I2P]].

Going through the usual [[review and merge
process|contribute/merge_policy]] is welcome.

Upgrade Torbutton
-----------------

Since Torbutton is not maintained in Debian anymore,
upgrade our Debian package to the latest release if needed.

Going through the usual [[review and merge
process|contribute/merge_policy]] is welcome.

Sync' iceweasel preferences with TBB
------------------------------------

* `general.useragent.override` is not kept up-to-date anymore in
  Torbutton, so we have to keep in sync manually with TBB's `prefs.js`

Coordinate with Debian security updates
---------------------------------------

See [[release_process/Debian_security_updates]].

Select the right branch
=======================

For a major release, the `devel` branch should be merged into the `testing`
branch and changes should be made from there.

From minor releases, work should happen in `stable`.

Update included files
=====================

AdBlock patterns
----------------

Patterns are stored in
`config/chroot_local-includes/etc/iceweasel/profile/adblockplus/`.

1. Boot Tails
2. Open *Tools* → *Addons*
3. Select *Adblock Plus* in extensions
4. Open *Preferences* → *Filter preferences…*
5. For each filters, click *Actions* → *Update filters*
6. Close Iceweasel
7. Copy the `.mozilla/firefox/default/adblockplus/patterns.ini` from
   this Iceweasel instance to the
   `config/chroot_local-includes/etc/iceweasel/profile/adblockplus`
   directory in the Tails Git checkout.
8. `git commit -m 'Update AdBlock Plus patterns.' config/chroot_local-includes/etc/iceweasel/profile/adblockplus/patterns.ini`

upgrade bundled binary Debian packages
--------------------------------------

That is: make sure the bundled binary Debian packages contain
up-to-date localization files.

For each bundled Debian package, get updated PO files from the
Transifex branches of `git://git.torproject.org/translation.git` (e.g.
`whisperback_completed`). Verify and commit.

Then check the PO files [[using i18nspector|contribute/l10n_tricks]].
Correct all the errors that are not in the ignored list of
[[`check_po.sh`|contribute/l10n_tricks]]. Commit the changes if any.

Then see the relevant release processes:

* [[liveusb-creator]]
* [[tails-greeter]]
* [[persistence-setup]]
* [[tails-iuk]]
* whisperback: 
  * see release process on <http://git.immerda.ch/?p=whisperback.git;a=blob;f=HACKING>
  * build a debian package
  * upload it to [[APT repository]]

Freeze
------

If we are at freeze time (e.g. preparing RC1):

* Merge the `devel` Git branch into `testing`.
* Reset the `testing` APT suite to the state of the `devel` one, as
  documented on [[contribute/APT_repository#workflow-freeze]].

Changelog
---------

Remove the placeholder entry for next release in `debian/changelog`,
and then:

	./release NEW_VERSION PREVIOUS_RELEASED_TAG

example:

	./release 0.3 0.2

This populates the Changelog with the Git log entries.

Then, launch an editor for the needed cleanup of the result.

included website
----------------

### Merge master

Merge the `master` branch into the one used to build the release.

### version number

If preparing a RC, skip this part.

In the branch used to build the release, update the `inc/*` files to
match the *version number* and *date* of the new release. Set the date
at least 24 hours in the future! Between tests and mirror synchronisation,
the build will not be released on the same day. Try to make sure it
matches the date of the future signature.

### features and design documentation

Read the Changelog carefully, and update the [[contribute/design]] and
[[doc/about/features]] pages accordingly.

Also:

	git grep PENDING wiki/src/contribute/design*

... and remove the `PENDING-FOR-N.M` warnings.

PO files
--------

Refresh the code PO files with `./refresh-translations`, commit
the result.

Refresh the website PO files with `./build-wiki`, and add / commit the ones
corresponding to pages that were added or changed accordingly to
changes coming with the new release. This e.g. ensures that the RC
call for translation points translators to up-to-date PO files.

If preparing a RC, ask on tails-l10n that someone checks the PO files
of the website [[using `check_po.sh`|contribute/l10n_tricks]], and
corrects all the errors.

Tag the release in Git
======================

	git tag -u 1202821CBE2CD9C1 -m "tagging version ${NEW_VERSION}" "${NEW_VERSION}"
	git push --tags

(Pushing the tag is needed so that the APT repository is updated, and
the Tails APT configuration works at build and boot time. It might be
premature, as testing might reveal critical issues, but this is
a signed tag, so it can be overridden later. Yes, there is room for
improvement here.)

Prepare the versioned APT suite
===============================

Follow the [[post-tag|contribute/APT_repository#workflow-post-tag]] APT
repository documentation.

Build images
============

Build the almost-final image
----------------------------

[[Build images|contribute/build]] and carefully read the build logs to make sure
nothing bad happened.

SquashFS files order
--------------------

Build an ISO image, burn a DVD and profile it **on bare metal** and update
`squashfs.order` in the Git repository.

In order to refresh the sort file, `profile` must be added to the kernel
command-line. Then, 30 seconds after `iceweasel` has been loaded, the sort
file can be retrieved from `/var/log/boot-profile`.

It must then be copied to `config/binary_rootfs/squashfs.sort`. This file is
automatically used by `lb_binary_rootfs` to tell `mksquashfs` to use the
provided *sort list*.

(See [[!tails_todo improve_boot_time_on_cd]] for details.)

Build the final image
---------------------

Then, all included files should be up-to-date, and the versioned APT
suite should be ready, so it is time to:

* tag the release *again*, with all included files in
* `git push --tags`
*  build the final image!

Build the Incremental Update Kit
--------------------------------

Example:

    $ sudo tails-create-iuk --squashfs-diff-name 0.14.squashfs \
        --old-iso tails-i386-0.14\~rc2.iso \
        --new-iso tails-i386-0.14.iso      \
        --outfile Tails_i386_0.14-rc2_to_0.14.iuk

Prepare update-description files
--------------------------------

1. Prepare update-description files (see [[!tails_todo incremental_upgrades]]
   for details):
   * update (create if needed) an update-description file for every
     *previous* supported releases (e.g. N-1, N-1~rc2), that describes
     the path to the one being released
   * create a new update-description for the version being released,
     that expresses that no update is available for that one yet
1. Detach-sign the update-description files.
1. Rename the detached signatures from `.asc` to `.pgp`.

Testing
=======

Until [[!tails_todo automated_builds_and_tests]] are setup, some manual testing
has to be done by the persons preparing the release, in addition to the
real-world tests done by fellow beta-testers.

The manual testing process [[is documented on a dedicated
page|release_process/test]].

Generate the OpenPGP signatures and Torrents
============================================

First, create a directory with a suitable name for every image to be
released, such as `tails-i386-0.7`.

Second, copy the built images to these brand new directories and
rename it to fit our `tails-ARCH-VERSION.iso`. naming
convention e.g. `tails-i386-0.7.iso`.

Third, generate detached GnuPG signatures for every published image,
in the same directory as the image and with a `.pgp` extension; e.g.

	gpg --armor --default-key 1202821CBE2CD9C1 --detach-sign *.iso
	rename 's,\.asc$,.pgp,' *.asc

Fourth, create a `.torrent` file for every directory to be published:

	mktorrent -a 'http://torrent.gresille.org/announce' \
	  <DIRECTORY>

Fifth, check the generated `.torrent` files metainfo, e.g.
using `btshowmetainfo`, to make sure they don't contain
unwanted information.

Sixth, generate detached GnuPG signatures for every published
`.torrent` file:

	gpg --armor --default-key 1202821CBE2CD9C1 --detach-sign \
	  tails-i386-0.7.torrent
	rename 's,\.asc$,.pgp,' *.asc

Upload images
=============

## Upload to HTTP mirrors

- upload the images to the primary rsync mirror
- update the `project/trace` file (with current epoch in it: `date
  +%s`) on the primary rsync mirror
- update the `inc/trace` of the wiki with the same epoch as you
  previously put in `project/trace`, even for a release candidate
- make sure every webserver listed in the `dl.amnesia.boum.org` round
  robin pool has the new version
- test downloading

## Announce, seed and test the Torrents

Announce and seed the Torrents using whatever box you can.
A decent, stable and permanent Internet connexion is required.

Test them with a BitTorrent client running in a different place.

Update the website and Git repository
=====================================

In order to get any new documentation into the website, merge either
`stable` or `testing` (depending on which release you just did) into
`master`.

Rename the `.packages` file to remove the `.iso` part of its name.

Copy the `.iso.pgp`, `.packages`, `.torrent` and `.torrent.pgp`
files to the Git repository's `wiki/src/torrents/files/` directory.

Generate the SHA-256 hash of every image to be released in `inc/*`; e.g.

	sha256sum tails-i386-0.7.1.iso | cut -f 1 -d ' ' | tr -d '\n' \
	  > stable_i386_hash.html

Update todo and bugs tags:

 - in `todo/*`: replace `pending` tags with `todo/done` tags
 - in `bugs/*`: replace links to `pending` with links to `done` (`[[todo/done]]`)

Update the [[support/known_issues]] page.

Write the announcement for the release in `news/version_X.Y.mdwn`. Use the
meta directive to set the post title to "Tails X.Y is out" so
that aggregators (such as Planet Debian Derivatives) display a more
catchy title. Add the `announce` tag to have an email sent to the news
mailing-list.

Write an announcement listing the security bugs affecting the previous
version in `security/` in order to let the users of the old versions
know that they have to upgrade. This announcement page shall be dated back
to a few days before the one to be released was *built*.

Generate PO files for the release and security announcements,
by refreshing your local instance of the wiki with `./build-wiki`.
Then, send them to <tails-l10n@boum.org> so that they get translated
shortly, perhaps even soon enough to integrate them before pushing the
release out officially.

Import the update description files and their detached OpenPGP
signature into the `updates/` tree. See [[!tails_todo incremental_upgrades]]
for the file naming conventions.

Then, record the last commit before putting the release out for real:

	git commit -m "releasing version ${NEW_VERSION}"

Go wild!
========

Push
----

### Git

Push the last commits to our Git repository:

	git push

IRC
---

Update the topic in our [[chatroom|chat]].

Tor blog
--------

We announce *major* releases on the Tor blog:

- [login to their Drupal](https://blog.torproject.org/user)
- *Add a New Blog Post*
- add the same tags as the previous release announce had
- choose *Filtered HTML* as the *Input format*
- paste the HTML generated by ikiwiki from the announce in `news/`
  into the textarea in the blog post editor
- cleanup a bit to make it shorter
- add a link to our [[download page|download]]
- change the internal links into external links
- turn `<h1>` into `<strong>`
- direct users to [[our communication channels|support/talk]] for comments and feedback,
- disable comments

Twitter
-------

Announce the release by tweeting a link to the "news" page.

Prepare for the next release
============================

1. Move the previous stable release to `obsolete` on the mirrors.
1. Remove any remaining RC for the just-published release from
   the mirrors.
1. Pull `master` back and merge it into `devel`.
1. Follow the
   [[post-release|contribute/APT_repository#workflow-post-release]] APT
   repository documentation.
1. Push the resulting `devel` branch.
1. Reset experimental:
   - take note of branches merged into `experimental`, but not into
     `devel` (`git log --merges devel..experimental` may help)
   - `git checkout experimental && git reset --hard devel`
   - hard reset the `experimental` APT suite to the state of the
     `devel` one
   - merge additional branches into experimental (both at the Git and
     APT levels)
   - `git push --force origin experimental`
