[[!toc levels=3]]

# Rationale

Partial upgrades should provide only what has changed between two
releases (deltas) and have a way to apply those changes to the
previous version. 

At boot-time the security warning telling that a new Tails version is available
should provide an automated way of doing the upgrade.

# Definitions

* **update-description file**: a file that describes the update from
  a given version, to another, newer given version of a software
  product.
* **Incremental Upgrade Kit (IUK)**: a file that contains everything
  needed to update from.
* **full image**: a file that is sufficient to install and run Tails
  (currently, that means an ISO image).
* **target files**: the whole set of files included by reference into
  an update; e.g. this may be an IUK or a full image.

# Current status and roadmap

See [[blueprint/incremental_upgrades]].

# Scenarios

## As a Tails user

### When I boot Tails

The scenarios are described in Cucumber-style, using [[!cpan
Test-BDD-Cucumber]], in the `features/frontend` directory of the
`iuk` [[contribute/Git]] repository. Use the `pherkin
features/frontend` command to run them.

## As a Tails developer

### When I prepare a point-release

#### I should prepare an IUK

The scenarios about this are described in Cucumber-style, using
[[!cpan Test-BDD-Cucumber]], in the `features/create` directory of the
`iuk` [[contribute/Git]] repository. Use the `pherkin
features/create` command to run them.

#### I should test the IUK

Until we have [[!tails_ticket 6090 desc="automated tests"]],
I should manually try to install the IUK as intended on top of the old
version of Tails, and I should check that the resulting system behaves
as it should.

#### I should prepare update-description files

FIXME

* for the previous release (to announce they may update using the IUK
  that's being prepared)
* for the new release (to announce no update is available)

#### I should publish the IUK

FIXME

#### I should publish update-description files

FIXME

### When I prepare a major release

FIXME

#### I should prepare an update-description file

FIXME

* for the previous release (to announce they may update using the
  release that's being prepared)
* for the new release (to announce that no update is available)

#### I should publish the update-description file

FIXME

# Implementation

## Upgrade paths

To ease implementation, only upgrades to the next closest step
are supported.

E.g. say one has installed Tails 0.11 a while ago, and forgets
about it. We then release Tails 0.11.1, and publish a `0.11_to_0.11.1`
IUK, advertised by the update-description file for 0.11 users. We then
release Tails 0.11.2, and publish a `0.11.1_to_0.11.2` IUK, advertised
by the update-description file for 0.11.1 users. If the user starts
their Tails 0.11, the upgrade system proposes upgrading to 0.11.1.
Say the user accepts, the upgrade is performed, the user reboots, and
the upgrade system now proposes upgrading to 0.11.2.

Allowing to run these two steps in a row, without rebooting, is
mainly a GUI problem, and is postponed.

## Infrastructure

### generate an IUK

We have a `tails-create-iuk` program that takes two Tails full images as input, and:

* builds the "diff" SquashFS
* gets the new kernel(s), initrd(s), bootloader configuration
* brings all this together into a single file, in the IUK format

### Incremental Update Kit

#### IUK format

An IUK is a tar archive, compatible with GNU tar, that contains the
following files:

* `FORMAT`: contains the version of the IUK format (that is *1*), as
  a positive integer encoded in ASCII.
* `control.yml`: YAML associative array with the following keys:
  - `delete_files`: a list of files to delete from the
    system partition.
* zero, one or more `*.tar[.bz2]`: tar archives, compatible with GNU tar, optionally
  compressed with bzip2, that contain the set of files to add to, or
  update in the system partition: kernel(s), initrd(s), bootloader
  configuration, `*.squashfs` (the SquashFS "diff" that must be
  stacked on top of the older SquashFS filesystem(s)), etc.

File paths, both in `*.tar[.bz2]` and in the `delete_files` list, are
relative to the Tails system partition root, and must be compatible
with a FAT32 filesystem.

Tarballs contained in the IUK are meant to be extracted, one after the
other, sorted by ASCII order.

#### Initial implementation details

(This section is not a specification.)

The initial IUK generator will ship those files in every IUK:

* `system.tar` contains files that are already compressed
  (e.g. kernel, initrd, `*.squashfs`)
* `boot.tar.bz2` contains files that are not compressed already
  (that is the syslinux configuration)

These are implementation details the IUK installer software must not
rely upon.

### Mirrors infrastructure

Using something like [Mozilla's
channels](https://wiki.mozilla.org/Software_Update:Channels)
(*stable*, *beta*, *nightly*) would e.g. allow us to push beta
updates earlier to a brave subset of users. Subscribing to a channel
other than *stable* is something that would be worth
[[persisting|doc/first_steps/persistence]]. We are not likely to
implement a channels system in phase one, but the infrastructure we
set up does leave room for such future extension.

### Update-description files

We want the client to get an answer to questions such as "I run
version N of product P on architecture A, what stable release update
is available?". To allow us changing the way the answer is computed in
the future, the amount of work done on the client's side should be
kept to a minimum. So, let's insert a level of indirection, and
pre-compute server-side the answer to the queries we want to support.

The answers are distributed on our HTTP servers in the form of a set
of update-description file files.

#### update-description file URL

* `https://tails.boum.org/update`
* URL schema version (so we can change it in the future), that is `v1`
  to start with.
* product name (e.g. *Tails*, but some day we may have *TailsServer*,
  *TailsHandheld* or whatever)
* product version -- the currently running version to upgrade from,
  e.g. *0.11* or *0.11.1*
* build-target (e.g. *i386*)
* channel (e.g. *stable* or *beta*)
* `update.yml`

Example: <https://tails.boum.org/update/v1/Tails/0.11/i386/beta/updates.yml>

Such a file shall be shipped along with its OpenPGP detached signature
(`updates.yml.pgp`).

#### update-description file format

An update-description file contains a YAML associative array with the
following top-level keys:

* `product-name`
* `product-version`
* `build-target`
* `channel`
* `updates`: a list of update elements.

Each update element is itself an associative array describing an
update to an individual product version, with the following keys:

* `version` -- the version of this update, that is the version of the
  running product after the update is completed and the system
  restarted (e.g. *0.11.1*)
* `type` -- *major* or *minor*
* `details-url` (optional) -- a URL to a web page with more
  information about the specified update (e.g.
  <https://tails.boum.org/news/version_0.11.1/>)
* `update-paths` -- a list of at least one and no more than two
  update path elements.

An update path element describes a set of target files that lives on
a remote server that must all be downloaded and applied to the product
to update it to that version. The keys for an update path element are
as follows:

* `type` -- *full* or *incremental* (IUK are about incremental
  upgrades, but let's make room to announce full images this way too
  at some point)
* `target-files`: a list of target files for this upgrade path.

Every target file element has the following keys:

* `url` -- A URL to the target file.
* `size` -- The size of the update, in bytes.
* `sha256` -- The SHA-256 hash of the patch file, encoded as an
  hexadecimal string. If the client generated value does not match
  this, the integrity check fails after download. (Other kind of
  hashes may be added in a future revision of the update-description
  file format -- which of these multiple hashes the client must verify
  will need to be specified when this happens.)

Example that would be found at
<https://tails.boum.org/update/v1/Tails/0.11.1/i386/stable/updates.yml>:

	product-name: Tails
	product-version: 0.11.1
	channel: stable
	build-target: i386
	
	updates:
	  - version: 0.11.2
	    type: minor
	    details-url: https://tails.boum.org/news/version_0.11.2/
	    update-paths:
	      - type: incremental
	        target-files:
	          - url: http://dl.amnesia.boum.org/tails/stable/iuk/Tails_i386_0.11.1_to_0.11.2.iuk
	            size: 37345648
	            sha256: 5c5c47f6155e7807c971251fdad28d5f72ff78db446e43a41e4b900f29229a7d
	      - type: full
	        target-files:
	          - url: http://dl.amnesia.boum.org/tails/stable/tails-i386-0.11.2/Tails-i386-0.11.2.iso
	            size: 762123456
	            sha256: 1015e37e14c6daaecd528b4a841ef6ac2156a5790346d0fd036f9566ce5f641b

### Initial implementation details

This section is not a specification. The URL where the IUK's are
stored, and their file name, may change. If this happens, any
update-description file available on Tails HTTP mirrors, that
references an IUK whose URL changes, must be updated accordingly.

#### IUK file basename

An IUK's file basename is not an authoritative source of information
regarding its content. However, it should be unique (among IUKs that
exist on the Tails HTTP servers at a given time).

An IUK's file name is built from these underscore-separated elements,
followed by the `.iuk` suffix:

* product name (e.g. *Tails*)
* build-target (e.g. *i386*)
* product version -- the currently running version to upgrade from,
  e.g. *0.11* or *0.11.1*
* `to`
* the version of this update, that is the version of the running
  product after the update is completed and the system restarted (e.g.
  *0.11.2*)

Example: `Tails_i386_0.11.1_to_0.11.2.iuk`

#### IUK URL

A given IUK is meant to be made available at the URL composed from:

* `http://dl.amnesia.boum.org/tails/iuk/`
* the IUK file basename

Example: <http://dl.amnesia.boum.org/tails/iuk/Tails_i386_0.11.1_to_0.11.2.iuk>

## Client and user interface

The program currently telling that a new Tails version is available
must be updated to use update-description files
instead of the current Atom feed.

### update-description downloader and verifier

This program has the responsibility to download and verify an
update-description file.

* Build the URI to its update-description file (might even be done at
  build time and hard-coded into the image) and to its
  cryptographic signature.
* Fetch the update-description file and its signature at these URIs.
* Verify the cryptographic signature of the update-description file.
* Check that content of the update-description file matches the
  currently running system (in terms of product name, product
  version, build-target and channel).
* Once all these steps have been successfully performed, the content
  of the update-description file is trusted to be legit, and is
  returned to the caller as such.

Failure, at any of the above steps, must be reported to the caller.

### update frontend

* The update frontend is run (with password-less sudo) by the desktop
  `amnesia` user, as the dedicated `tails-update-frontend` user that
  has the right to run all other incremental updates program as their
  own dedicated user.
* Get a verified update-description file from the update-description
  downloader and verifier.
* Extract information about available updates from the
  update-description file.
* Present such information to the user, let them decide if they want
  to perform the update.
* If an incremental update path to the new version is available:
  - securely create a tempdir in `tmpfs`, owned by
    `tails-iuk-get-target-file:tails-iuk-get-target-file`,
    with mode 0750
  - run the IUK downloader and verifier, asking it to drop the
    verified target file into the tempdir (either the default umask
    will do, or steps shall be taken to make sure the
    `tails-install-iuk` user may read the resulting files)
* Else, point at full upgrade documentation.
* Shutdown the network.
* Remount the system partition read-write.
* Perform the update using the files provided by the "target files
  downloader and verifier".
* Tell the user the upgrade process is finished, and they *MUST*
  immediately reboot (due to system partition being left mounted
  read-write, 'cause we cannot remount it read-only once it's been
  mounted read-write).
* The update frontend checks if enough disk space is available on the
  Tails system partition. The (disk space needed / target file size)
  factor was defined experimentally to 3.0 (2.72 fails, 2.8 works, and
  we want some safety margin in case other IUKs are not formed exactly
  the same way). If too little disk space is available, the
  incremental update is not attempted, and the user is pointed at the
  full update path.
* The update frontend is run by a shell wrapper that checks if enough
  free memory is available: we do not want the user to miss updates,
  merely because the Tails Updater was run in low-memory conditions,
  and could not do its job.

### target file downloader and verifier

This program has the responsibility to download and verify a target
file, and make available to the caller either the verified target
file, or some error message.

* Takes as arguments: URI, size, hash type, hash value, destination
  path where the verified target file should be left, and
  possibly options.

Detailed executable scenarios describe and test the behaviour of this
piece of software in Cucumber-style, using [[!cpan
Test-BDD-Cucumber]]. They may be found in the
`features/download_target_file` directory of the `iuk`
[[contribute/Git]] repository, and run using the `pherkin
features/download_target_file` command.

### install an IUK

Once a user has downloaded an IUK, they must have it installed.

We need an installer for IUKs:

* **Input**: the path to an (already verified) IUK.
* **Output**: success or failure (with error message when applicable).

Installing an IUK should happen at the same time as normal Tails
operation, but very carefully, because we need to remount the boot
medium read-write.

* Verify the IUK is in a supported format.
* Remount the boot-medium read-write.
* Extract the IUK archive.
* Move stacked squashfs found in the IUK in place.
* Extract tarballs (`*.tar[.bz2]`) contained in the IUK, one after the
  other, sorted by ASCII order.
* Delete files that are listed in the `delete_files` control field.
* Append the new SquashFS diff file name to the `live/Tails.module`
  file, in the Tails system partition.

Detailed executable scenarios describe and test the behaviour of this
piece of software in Cucumber-style, using [[!cpan
Test-BDD-Cucumber]]. They may be found in the `features/install`
directory of the `iuk` [[contribute/Git]] repository, and run
using the `pherkin features/install` command.

Resources:

* [Mozilla's updates
  processing](https://wiki.mozilla.org/Software_Update:Processing_Updates):
  building up some mechanism (such as their pending / applying /
  succeeded / failed status) to avoid retrying the same buggy update
  in a loop seems worth being considered.

### full update

The Tails installer is still in charge of performing full updates.
It deletes any `live/*.squashfs` file other than the one shipped
in the new ISO.

### signature verification

update-description file polling, parsing and verification is
implemented in Perl. Signature verification is made using
`GnuPG::Interface`'s `verify` method.

The verify method is run on a `GnuPG::Interface` object built with
`--homedir` pointed to a dedicated keyring directory, created at Tails
boot or ISO build time, that contains only the Tails signing public
OpenPGP key, which is assigned the minimum level of trust so that
GnuPG trusts the signatures made with the associated private key.

The `verify` method return value is `waitpid`'d for, and the GnuPG
child process exit status examined (zero means verification succeeded,
non-zero means verification failure).

# Code

* The bulk of the code needed to implement this design lives in the
  `iuk` [[contribute/Git]] repository.

# Research

## Secure update

* [TUF: The Update Framework](https://www.updateframework.com/)
* [Thandy specification](https://gitweb.torproject.org/thandy.git/blob_plain/HEAD:/specs/thandy-spec.txt)

## Discarded options and historical information

See the [[page about discarded options and historical
information|contribute/design/incremental_updates/archive]].
