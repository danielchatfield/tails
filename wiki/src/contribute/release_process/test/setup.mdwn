[[!meta title="Test suite installation and setup"]]

Until we have a Puppet module to manage this in automated fashion,
here's how to setup an environment to run our automated test suite.

Once you have a working environment, see [[test/usage]].

[[!toc levels=2]]

Debian packages
===============

The following packages are necessary on Debian Wheezy, with unstable
sources added:

    apt-get install git xvfb virt-viewer libsikuli-script-java \
        libxslt1-dev tcpdump unclutter radvd x11-apps syslinux \
        libcap2-bin devscripts ruby libvirt-ruby ruby-rspec \
        ruby-json cucumber x11vnc xtightvncviewer
    apt-get -t wheezy-backports install qemu-kvm qemu-system-x86 libvirt0 \
        libvirt-dev libvirt-bin seabios/unstable dnsmasq-base/unstable

The above libvirt packages lack support for the `removable` disk
property (needed by the `usb_install` feature), but we our patch is
now in upstream 1.1.x which should be in wheezy-backports by now.

If you're running the test suite in a nested environnement, install
xtightvncviewer on the bare metal level-0 host. Then you can use vncviewer's
`-via` option so that it automatically setup a ssh tunnel to your first level
test suite domain for you and display the Tails VM. Ex where $DISPLAY is the
display given to you by `run_test_suite` (often 0):

    vncviewer -viewonly -via user@level0 localhost:$DISPLAY

(Optional) If you want to capture the test session as a video you
need:

    apt-get install ffmpeg libvpx1

rjb
===

Not a part of Debian yet, and the rubygem is broken (no `rjb/extension`),
but it can be installed as follows:

    apt-get install build-essential ruby-dev openjdk-6-jdk
    export JAVA_HOME="/usr/lib/jvm/java-6-openjdk-amd64"
    git clone https://github.com/arton/rjb
    cd rjb
    # this is rjb-1.4.8 (there are no tags...)
    git checkout a30070810492e492de071ec4614a557099b23f6f
    ruby setup.rb


packetfu
========

Not a part of Debian yet, but there's a rubygem:

    gem install packetfu


Other requirements
==================

The system running the test suite needs an accurate clock since we
sync sync the clock from the host to the Tails guest after a
background snapshot restore to appease Tor.


Running test suite as a non-root user
=====================================

This is entirely possible, but there's some additional configuration
required. Run the following as `root`:

    addgroup tcpdump
    dpkg-statoverride --update --add root tcpdump 754 /usr/sbin/tcpdump
    setcap CAP_NET_RAW+eip /usr/sbin/tcpdump
    adduser $USER tcpdump
    adduser $USER libvirt
    adduser $USER libvirt-qemu

It's important to run `setcap` after `dpkg-statoverride` since the
latter deletes all capabilities. Unfortunately the `setcap` command
has to be rerun for that reason everytime the `tcpdump` package is
updated until [[!debbug 662845]] is fixed.

Running these commands will add some interesting capabilities to
`$USER`, so you may want to do this for a dedicated user separate from
your normal user. In that case (and if you run the tests as root) the
`--view` option won't work unless you grant `$USER` access to your
display via `xhost +SI:localhost:$USER`. Alternatively you can use the
`--vnc-server-only` option and manually connect to the VNC server with
your normal user. Just make sure the VNC viewer is in view-only mode
(e.g. `xtightvncviewer --view-only ...`) in order to not interfere
with the testing session.
