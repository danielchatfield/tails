[[!toc levels=1]]

# Changes

Keeping an eye on the changes between released versions is one of the
many safeguards against releasing crap.

## Source


Compare the to-be-released source code with previous version's one e.g.:

Boot the candidate ISO and find the commit it was build from with the
`tails-version` command.

Then, from the source tree, see the diff:

	git diff <old tag>..<ISO commit>

e.g. `git diff 0.17..06fa1ab80d55c9f29274b7459bd198edb1a8d53d`

## Result

Compare the list of bundled packages and
versions with the one shipped last time e.g.:

	/usr/bin/diff -u \
	    wiki/src/torrents/files/tails-i386-0.16.packages \
	    tails-i386-0.17.packages \
	    | wdiff --diff-input  --terminal

Check the output for:

- new packages that may cause harm or make the images unnecessarily
  big
- packages that could be erroneously removed
- new versions of software we might not have audited yet (including:
  does the combination of our configuration with software X version
  Y+1 achieve the same wished results as with software X version Y?)

## Image size

Check the image size has not changed much since the last release.

# Automated test suite

Our long term goal is to eliminate the manual test suite (except the
parts which require real hardware) and have the automated test suite
run all our tests. It's design, and how to write new tests, are
documented on a [[dedicated page|test/automated_tests]].

## Usage

Use the `run_test_suite` script found in the Tails source root to run
all automated Cucumber test features. See the [[setup
documentation|test/setup]] in case you don't have a testing
environment yet.

It's important to note that some features only depend on the Tails
sources, and some on the actual product of the sources, i.e. a Tails
ISO image. These features are tagged `@source` and `@product`,
respectively. The arguments passed to `run_test_suite` may only affect
one of these types of features and not the other.

A typical example run of a few `@product` features could be:

    ./run_test_suite --view --capture test-0.17.webm \
        --iso path/to/tails.iso \
        features/apt.feature features/erase_memory.feature

which will test only the `iceweasel` and `erase_memory` features (if
no feature paths are given, all features in `features/cucumber` will
be tested) of the given ISO image `tails.iso` while showing the test
session in a VNC viewer (`--view`) and also capturing it into a video
called `test-0.17.web` (`--capture`). Similarly, to test a `@source`
feature, we'd simply run something like:

    ./run_test_suite features/build.feature

For full instructions, see its `--help`.

Note: since the test suite itself uses `virt-viewer` to interact with
the Tails guest you cannot use it as that will steal the session from
the test suite, leaving it with a blank screen.

## Automated test suite migration progress

In the manual feature tests below we "tag" tests the following way to
keep track of their progress of being replaced by a corresponding test
in the automated test suite:

* Not tag means that an appriopriate automated test is not implemented
  at all.
* `[needs-fix]` means that there's a partial implementation of an
  automated test, or that it has some issue that needs a fix.
* `[needs-review]` means that an automated test is implemented and
  that someone else than the author should review it for correctness.
* `[needs-pass]` means that an automated test is implemented and that
  someone else than the author must run it and see it pass.
* `[can't-automate]` means that these tests cannot possibly be
  implemented in an automated way and will require manual testing.

In the tags we also refer to the name of the `.feature` file(s), and
for `[needs-fix]` we link to the corresponding TODO item (XXX: will be
done once merged into the `master` branch).

Tests which are completely implemented, reviewed and passed are
removed from below. Such tests are considered to be covered by the
automated test suite and do not have to be manually tested any more.

# Iceweasel

* does the exposed User-Agent match the TBB's one?
  (connect to a website you can check the access logs for)
* Running `getTorbuttonUserAgent` should produce the useragent set by the
  Torbutton version installed and used in Iceweasel.
* Browsing (by IP) a HTTP or HTTPS server on the LAN should be possible.
* Browsing (by IP) a FTP server on the LAN should be possible.
* Browsing (by hostname) a FTP server on the Internet should be possible, and
  downloading a file should be possible (once [[!tails_todo fix Internet FTP support]]
  is fixed)
* Does playing HTML5 videos work? In particular, (due to its popularity)
  do [youtube](http://www.youtube.com) videos work (once
  [[!tails_todo easier YouTube]] is fixed -- currently object unblocking in
  NoScript is required)?
* Compare the fingerprint of Tails and the latest TBB using at least
  <https://panopticlick.eff.org/> and <http://ip-check.info/>, and
  update the [[fingerprint section|support/known_issues#fingerprint]] of
  the known issues page.

# Pidgin

* pidgin: is an IRC session really torified?
 - if you are running an IRC server: check there
 - else: see if the connection to the IRC server appears in Vidalia
   connections list
* Check OTR is working.
* Check at least IRC and XMPP are working.
* Check if pidgin doesn't leak too many informations on replying to different
  CTCP requests:
  * Start Tails and launch pidgin once done. Connect to an IRC server where you're already on
  * try to /ctcp <Tails_account_nick> COMMAND
  (for a list of commands, see [this page](http://www.wikkedwire.com/irccommands)).

# Tor

* The version of Tor should be the latest stable one.
* firewall: is the Tor-enforcement effective?
 - check output of `iptables -L -n -v`
 - check output of `iptables -t nat -L -n -v`
 - try connecting to the Internet after unsetting `$http_proxy` and
   `$HTTP_PROXY` using a piece of software that does not obey the
   GNOME proxy settings, *and* is not explicitly torified in Tails:
   `unset http_proxy ; unset HTTP_PROXY ; wget --no-proxy
   http://monip.org` (should result in a "`Connection refused`".
* firewall: is IPv6 traffic blocked?
 - check output of `ip6tables -L -n`
 - at a place with working IPv6: try connecting to a known-working
   IPv6-enabled server on its IPv6 address over TCP and icmp6.
* is `/etc/resolv.conf` OK both before/after DHCP has been setup? it should
  *always* read `nameserver 127.0.0.1`
* [[doc/first_steps/startup_options/bridge_mode]] should work:
  1. Boot with the `bridge` option.
  1. Setup an administrator password.
  1. Enter a bridge or a few.
  1. Use the Internet.
  1. Check from time to time with `netstat` that the only outgoing
     direct network connections go to the configured bridge(s).
* Verify that all destinations reached from an intensive Tails session
  are tor routers or
  authorities: `[needs-fix: many scenarios]` (see "check firewall
  leaks in every scenario" on the ticket).
  1. Boot Tails without the network in.
  1. Start dumping your whole session's network activity with `sudo
     tcpdump -n -i any -w dump` (or better, do the dump on another machine,
     or on the host OS if Tails is running in a VM).
  1. Plug the network.
  1. Wait for Tor to be functional.
  1. Save the `cached-microdesc-consensus` out of the VM (it's needed
     to analyze the network dump later on).
  1. Do *a lot* of network stuff (why not run do this while doing all
     the other tests **but** I2P and the unsafe browser, which would
     show many false positives?)
  1. Then check all destinations, e.g. by using tshark and the script below:

     	# set DUMP to the output of tcpdump above
     	DUMP=dump
     	# set CONSENSUS to Tor's consensus from the Tails session
     	CONSENSUS=cached-microdesc-consensus
     	NODES=$(mktemp)
     	awk '/^r / { print $6 }' ${CONSENSUS} > ${NODES}
     	# Note that these default directory authorities may change! To be
     	# sure, check in Tor's source, src/or/config.c:~900
     	DIR_AUTHS="
     	128.31.0.39
     	86.59.21.38
     	194.109.206.212
     	82.94.251.203
     	76.73.17.194
     	212.112.245.170
     	193.23.244.244
     	208.83.223.34
     	171.25.193.9
     	154.35.32.5
     	"
     	tshark -r ${DUMP} -T fields -e ip.dst | sort | uniq | \
     	while read x; do
     	    ip_expr=$(echo ${x} | sed -e "s@\.@\\\.@g")
     	    if echo ${DIR_AUTHS} | grep -qe "${ip_expr}"; then
     	        continue
     	    fi
     	    if ! grep -qe "^${ip_expr}$" ${NODES}; then
     	        echo "${x} is bad"
     	    fi
     	done
     	rm ${NODES}

     Note that this script will produce some false positives, like your
     gateway, broadcasts, etc.

## Stream isolation

See our [[stream isolation design
page|contribute/design/stream_isolation]] for details such as port
numbers, that are not duplicated here to avoid desynchronization.

Assumptions for the following tests: first, Tor stream isolation
features properly do their work; second, our `torrc` sets the right
`SocksPort` options to implement what we want.

* Make sure Claws Mail use its dedicated `SocksPort` when connecting
  to IMAP / POP3 / SMTP servers.
* Make sure these use the `SocksPort` dedicated for Tails-specific applications:
  - htpdate
  - tails-security-check
  - incremental updates
* Make sure iceweasel uses its dedicated `SocksPort`.
* Make sure other applications (Polipo, Gobby 0.4 and 0.5, SSH, whois)
  use the default system-wide `SocksPort`.
* Make sure a random application run using `torify` and `torsocks`
  (e.g. `/usr/bin/gobby-0.5`) uses the default system-wide `SocksPort`.

# Use of untrusted partitions

* are any local hard-disk partitions mounted or used as swap?
  boot on a (possibly virtual) machine that has a cleartext swap
  partition not managed by LVM. This swap partition must not be used
  by Tails.
* is a Live system found on a local hard-disk partition used? boot the
  DVD/USB stick you are testing on a (possibly virtual) machine that
  has a Tails system copied on a cleartext partition not managed by
  LVM. The DVD/USB ramdisk must use the Tails system found on the
  DVD/USB, and not the one found on the hard disk. (Also check that
  without Tails, that other Live system boots.)
  `[needs-review, needs-pass: untrusted_partitions]`
* is a persistence volume on a local hard-disk partition used?

# Claws

* Check mail over IMAP using:
  - a "clearnet" IMAP server.
  - a hidden service IMAP server (e.g. TorMail, jhiwjjlqpyawmpjx.onion, or
    RiseUp, xyvp43vrggckj427.onion).
* Send an email using:
  - a "clearnet" SMTP server.
  - a hidden service SMTP server (see above).
* Check that the profile works and is torified (specifically the
  EHLO/HELO SMTP messages it sends):
  1. Send an email using Claws and a non-anonymizing SMTP relay.
  1. Then check that email's headers once received, especially the
     `Received:` and `Message-ID:` ones.
* Also check that the EHLO/HELO SMTP message is not leaking anything
  with a packet sniffer:
  1. start Claws using the panel icon.
  1. Disable SSL/TLS for SMTP in Claws (so take precautions for not
     leaking your password in plaintext by either changing it
     temporarily or using a disposable account).
  2. Run `sudo tcpdump -n -i lo -w dump` to capture the packets before
     Tor encrypts it, and check the dump for the HELO/EHLO message and
     verify that it only contains `localhost`.

# Whisperback

* can a bug report e-mail be sent?
* is it correctly encrypted?

# GnuPG

`[needs-review, needs-pass: torified_gnupg]`

Those tests shall be run using GnuPG from the command-line and through
the Seahorse GUI:

* key search/receive: torified? going to the configured keyserver?
 - `gpg --search` tells what server it is connecting to
 - the connection to the configured keyserver must appear in Vidalia's
   list of connections
 - if you run a keyserver, have a look there.

# Monkeysphere

* Monkeysphere validation agent key search/receive: torified? uses
  configured keyserver?

# Time

`[needs-review, needs-pass]`

1. Boot Tails without a network cable connected (i.e. no network on boot).
2. set the time to an obviously wrong one:

           date --set="Mon, 01 Mar 2000 15:45:34 - 0800"

3. connect the network cable

=> the date should be corrected and Tor/Vidalia should start
correctly.

# erase memory on shutdown

- check that `memlockd` is running
  `[needs-review, needs-pass: erase_memory]`
- check that `udev-watchdog` is running and monitors the right device:
  `[needs-fix: erase_memory: check that it's monitoring the right device]`
  * on USB
  * on DVD
- After booting from DVD, remove Tails boot medium and check that the
  memory erasure process is started (`Loading new kernel`, at least).
  The USB tests are bellow, in the USB installer section.

Testing that the needed files are really mapped in memory, and the
erasing process actually works, involves a more complicated
process that is worth [[a dedicated page|test/erase_memory_on_shutdown]].
`[needs-review, needs-pass: erase_memory]`

# Root access control

* Check you can login as root neither with the `amnesia` password nor
  with the `live` one.
* Boot Tails without setting a password and check you can't get
  PolicyKit administrative privileges (e.g. change internal hard
  disks in the Disk Utility), neither with the `amnesia` password nor
  with the `live` one. `[needs-fix: root_access_control]`
* Boot Tails with a password and check you can get PolicyKit
  administrative privileges. `[needs-fix: root_access_control]`
* Check that the $TAILS_USER_PASSWORD variable, if still existing in the system
  environment after the boot has finished, does not contain the clear text
  password.

# Virtualization support

* `modinfo vboxguest` should work when booted on the 686-pae kernel
* test in VirtualBox `[can't-automate?]`

# I2P

* Make sure that I2P is up-to-date, at least if the
  [changelogs](http://www.i2p2.de/announcements.html) mention that
  security critical bugs were fixed.
* Check that "Applications -> Internet -> I2P" works:
  - You get the "Starting I2P..." pop-up.
  - The router console opens in Iceweasel upon success.
  - You get the "I2P failed to start" pop-up on failure (e.g. no
    network so tordate failed).
* Check that I2P connects to the network:
  - The numbers in the "Peers" section of the router console should be
    non-zero.
  - You should get "Network: Hidden" in the "General" section.
* Check that you can reach some eepsites within Iceweasel, like
  <http://www.i2p2.i2p> and <http://forum.i2p>.
* Check that you can connect to the I2P IRC server through Pidgin.

# Git

* clone a repository over dumb transport (`git://`)
* clone a repository over SSH

# SSH

* Connecting over SSH to a server on the Internet should work (and
  appear in Vidalia's connections list).
* Connecting (by IP) over SSH to a server on the LAN should work.
* Connecting to a sftp server on the Internet using GNOME's "Connect
  to a server" should work.

# APT

* Make sure APT is configured to point to
  ftp.us.debian.org. `[needs-review, needs-pass: apt]`
* Doing an apt-get update and installing random
  packages. `[needs-review, needs-pass: apt]`
* Make sure the Tails repository suite matching the release tag is in
  APT sources.
* Make sure the Tails repository unversioned suites (e.g. `testing`,
  `stable` and `devel`) are *not* in APT sources.

# USB Installer/Upgrader

After each of the following tests:

* The installed or upgraded Tails medium shall be successfully booted.
  `[needs-review, needs-pass: usb_install]`
* The installed or upgraded Tails medium shall have the "emergency
  shutdown on boot medium removal" feature working: remove Tails boot
  medium and check that the memory erasure process is started
  (`Loading new kernel`, at least).
* The TailsData partition must survive
  upgrades. `[needs-review, needs-pass: usb_install]`

Tests to run:

* Test "Clone & Install":
  - from DVD. `[needs-review, needs-pass: usb_install]`
  - from USB. `[needs-review, needs-pass: usb_install]`
  - onto a USB stick that has a MBR partition table, and no
    partition at all (regression test)
  - onto a USB stick that already has an old-fashioned hybrid cat'd
    Tails on it
* Test "Clone & Upgrade" (onto a USB install containing an older
  Tails):
  `[needs-fix: usb_install: to-be-upgraded USB drive must contain an old Tails]`
  - from DVD.
  - from USB.
  - onto a USB stick that already has a old-fashioned cat'd hybrid
    Tails on it: should warn this action is not supported, and direct
    the user to the "Clone & Install" operation mode.

# Incremental updates

Try every update path supported by the generated update-description
files:

* for every incremental update paths: make sure the resulting updated
  system "works fine" (what does that mean? do we want to run the full
  test suite on these? **FIXME**)
* for updates that only propose a non-incremental paths: make sure the
  user is guided just fine (that is? **FIXME**)

Given these are not published yet, a local test setup is needed:

* a web server
* a replacement for the Tails website's `/update/` tree with
  update-description files in there, e.g.
  `/var/www/tails/update/v1/Tails/0.14~rc2/i386/stable/updates.yml`
* a replacement for the Tails HTTP mirrors' `iuk` directories,
  e.g. `/var/www/tails/stable/iuk/Tails_i386_0.14-rc2_to_0.14.iuk`

Also, the updater must be called, from inside the system to update,
with every needed option to use that rather than the online published
stuff: **FIXME**.

# Persistence

* Activate persistence on a Tails USB install with all presets on, and
  a few custom directories. `[needs-review, needs-pass: usb_install]`
* Reboot, enable persistence. Verify via `mount` that each preset has
  a mount that seem correct (e.g. "Pidgin preset =>
  `/home/amnesia/.purple` has something mounted on
  it"). `[needs-review, needs-pass: usb_install]`
* Try read-write mode. Make sure that persistent files are writeable,
  and that changes do survive
  reboot. `[needs-review, needs-pass: usb_install]`
* Try read-only mode. Make sure that persistent files are writeable,
  but that no changes survive
  reboot. `[needs-review, needs-pass: usb_install]`
* Turn off some persistence presets, reboot, and make sure they are
  not activated.

# Windows Camouflage

Enable Windows XP camouflage via the Tails Greeter checkbox and:

* gpgApplet's context menu should look readable

# Unsafe Web Browser

* On start, if no DNS server was configured in NetworkManager
  (e.g. if there's no network connection), there must be an error.
* Once started, check that:
  - it has no scary red theme when Windows Camouflage is activated.
  - the iceweasel instance runs as the `clearnet` user.
  - it has no proxy configured.
  - no extensions are installed.
  - there are no bookmarks.
* On exit, check that:
  - make sure that its chroot gets properly teared down on exit (there
    should be nothing mounted inside `/var/lib/unsafe-browser`).

# Real (non-VM) hardware

`[can't-automate]`

* Boot on bare-metal on USB.
* Boot on bare-metal on DVD.
* Measure boot time (from syslinux menu the GNOME dektop ready - quickly press
  enter in the greeter), then on some reference bare metal hardware, and
  compare with previous version. The new one should not be significantly
  slower to start.

# Documentation

* Check that links to the online website (`Mirror:`) at the bottom of
  bundled static web pages are working. Else, it probably means the
  wiki was not built with a recent enough ikiwiki.
* Browse around in the documentation shipped in the image. Internal
  links should be fine.

# Internationalization

Boot and check basic functionality is working for every supported
language.

* The chosen keyboard layout must be applied.
* The virtual keyboard must work and be auto-configured to
  use the same keyboard layout as the X session.
* The iceweasel search engine must be localized (for languages we
  ship a localized searchplugin for).
* The iceweasel spelling dictionary must be localized (for languages
  that are supported by our branding extension).

# Misc

* Check that all seems well during init (mostly that all services
  start without errors), and that dmesg seems ok.
* MAT should be able to clean a PDF file. `[needs-fix]` (see ticket)
* Browsing (by hostname) a FTP server on the Internet should be
  possible using GNOME's *Connect to server* feature
  (once [[!tails_todo fix Internet FTP support]] is fixed)
* The Tails signing key in `/usr/share/keyrings/tails-keyring.gpg`
  should be up-to-date (that is, neither it nor one its subkeys must
  have expired, or be about to expire any time
  soon). `[needs-fix]` (see ticket)
