#!/bin/sh

set -e

TMPFS_SIZE_MB=6144 # 6 GB
TMPFS_SIZE_BYTES=$(($TMPFS_SIZE_MB * 1024 * 1024))

as_root_do() {
	sudo \
		${RSYNC_PROXY:+RSYNC_PROXY="$RSYNC_PROXY"} \
		${http_proxy:+http_proxy="$http_proxy"} \
		${https_proxy:+https_proxy="$https_proxy"} \
		${ftp_proxy:+ftp_proxy="$ftp_proxy"} \
		${no_proxy:+no_proxy="$no_proxy"} \
		${MKSQUASHFS_OPTIONS:+MKSQUASHFS_OPTIONS="$MKSQUASHFS_OPTIONS"} \
		"$@"
}

usable_memory() {
	free -b | awk '/cache:/ { print $4 }'
}

bootstrap_stage_is_ok() {
	[ -d "$1" ] || return 1
	[ "$(sudo du -sm $1 | cut -f1)" -ge 100 ] || return 1
	for dir in bin dev etc lib proc root sbin sys usr var; do
		[ -d "$1/$dir" ] || return 1
	done
	return 0
}

cleanup() {
	cd /
	mounts=$(mount | grep -E "^[^[:space:]]+ on $BUILD_DIR" | \
		awk '{print $3}' | sort -r)
	[ -n "$mounts" ] && sudo umount $mounts
	[ -d "$TMPFS_DIR" ] && ( sudo umount $TMPFS_DIR ; rmdir $TMPFS_DIR )
	[ -d "$BUILD_DIR" ] && sudo rm -rf $BUILD_DIR
}

trap cleanup EXIT

if [ "$TAILS_RAM_BUILD" ]; then
	if [ "$(usable_memory)" -lt "$TMPFS_SIZE_BYTES" ]; then
		echo "Not enough memory available for an in-memory build. Aborting." >&2
		exit 1
	fi
fi

REV="${1:-$(git --git-dir=/amnesia.git name-rev --name-only HEAD)}"
COMMIT="$(git --git-dir=/amnesia.git rev-parse --verify "$REV")"

test -d /home/vagrant/amnesia || git clone /amnesia.git /home/vagrant/amnesia

cd /home/vagrant/amnesia

git fetch origin
as_root_do git checkout --force "$REV"
as_root_do git reset --hard "$COMMIT"

if [ "$TAILS_CLEAN_BUILD" ]; then
	as_root_do lb clean --all
	[ -d "$dir" ] && sudo rm -rf /var/cache/stages_bootstrap
fi
as_root_do ./build-wiki

BUILD_DIR=$(mktemp -d /home/vagrant/tails-build.XXXXXXXX)
if [ "$TAILS_RAM_BUILD" ]; then
	TMPFS_DIR=$(mktemp -d /home/vagrant/tmpfs.XXXXXXXX)
	as_root_do mount -t tmpfs -o "noatime,size=${TMPFS_SIZE_BYTES},mode=0770,uid=root,gid=vagrant" tmpfs "$TMPFS_DIR"
	as_root_do mount -t aufs -o "noatime,noxino,dirs=$TMPFS_DIR=rw:/home/vagrant/amnesia/=rr+wh" aufs "$BUILD_DIR"
else
	as_root_do rsync -a /home/vagrant/amnesia/ "$BUILD_DIR"/
fi

cd "$BUILD_DIR"
as_root_do lb config --cache-packages false

if [ "$TAILS_BOOTSTRAP_CACHE" ] && \
    bootstrap_stage_is_ok /var/cache/stages_bootstrap; then
	# restore bootstrap stage and make live-build use it
	sudo mkdir -p "$BUILD_DIR"/cache/stages_bootstrap
	sudo mount --bind /var/cache/stages_bootstrap \
		"$BUILD_DIR"/cache/stages_bootstrap
	sudo touch "$BUILD_DIR"/.stage/bootstrap
	sudo touch "$BUILD_DIR"/.stage/bootstrap_cache.save
fi

as_root_do lb build

mv -f tails-* /vagrant

if [ "$TAILS_BOOTSTRAP_CACHE" ] && \
    ! sudo umount "$BUILD_DIR"/cache/stages_bootstrap 2>/dev/null; then
	# the cached bootstrap stage wasn't used (maybe it hadn't been
	# cached yet?) so we save the good one from the current build.
	sudo rsync -a --delete "$BUILD_DIR"/cache/stages_bootstrap/ \
		/var/cache/stages_bootstrap
fi
